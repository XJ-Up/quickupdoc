import type { FightingFit, HandleEvent } from '..';
import type { DefineComponent, PropType, ComponentOptionsMixin, PublicProps, ExtractPropTypes } from 'vue';
import type { Install } from '../_utils';
import Image from "./src/image";
export declare const FImage: Install<DefineComponent<{
    readonly src: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly alt: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly draggable: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly lazy: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly rootMargin: {
        readonly type: PropType<string | number>;
        readonly default: "100px" | undefined;
    };
    readonly width: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly height: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly block: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly fit: {
        readonly type: PropType<FightingFit>;
        readonly default: FightingFit;
        readonly validator?: ((value: FightingFit) => boolean) | undefined;
    };
    readonly select: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly referrerPolicy: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly round: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly errSrc: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly title: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly onLoad: {
        readonly type: PropType<HandleEvent>;
        readonly default: HandleEvent | null;
    };
    readonly onError: {
        readonly type: PropType<HandleEvent>;
        readonly default: HandleEvent | null;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    readonly src: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly alt: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly draggable: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly lazy: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly rootMargin: {
        readonly type: PropType<string | number>;
        readonly default: "100px" | undefined;
    };
    readonly width: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly height: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly block: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly fit: {
        readonly type: PropType<FightingFit>;
        readonly default: FightingFit;
        readonly validator?: ((value: FightingFit) => boolean) | undefined;
    };
    readonly select: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly referrerPolicy: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly round: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly errSrc: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly title: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly onLoad: {
        readonly type: PropType<HandleEvent>;
        readonly default: HandleEvent | null;
    };
    readonly onError: {
        readonly type: PropType<HandleEvent>;
        readonly default: HandleEvent | null;
    };
}>>, {
    readonly title: string;
    readonly round: string | number;
    readonly width: string | number;
    readonly src: string;
    readonly errSrc: string;
    readonly alt: string;
    readonly lazy: boolean;
    readonly fit: FightingFit;
    readonly rootMargin: string | number;
    readonly onLoad: HandleEvent;
    readonly onError: HandleEvent;
    readonly block: boolean;
    readonly height: string | number;
    readonly draggable: boolean;
    readonly select: boolean;
    readonly referrerPolicy: string;
}, {}>>;
/** image 组件实例类型 */
export type ImageInstance = InstanceType<typeof Image>;
export * from './src/interface';
export default FImage;
