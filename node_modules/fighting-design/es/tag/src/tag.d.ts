import type { FightingType, FightingIcon, FightingSize, HandleMouse } from '../..';
import type { DefineComponent, PropType, ComponentOptionsMixin, PublicProps, ExtractPropTypes } from 'vue';
declare const _sfc_main: DefineComponent<{
    readonly type: {
        readonly type: PropType<FightingType>;
        readonly default: FightingType;
        readonly validator?: ((value: FightingType) => boolean) | undefined;
    };
    /** 类名列表 */
    readonly close: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly round: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly background: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly color: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly beforeIcon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly afterIcon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly size: {
        readonly type: PropType<FightingSize>;
        readonly default: FightingSize;
        readonly validator?: ((value: FightingSize) => boolean) | undefined;
    };
    readonly simple: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly block: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly line: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly onClose: {
        readonly type: PropType<HandleMouse>;
        readonly default: HandleMouse | null;
    };
    readonly onClick: {
        readonly type: PropType<HandleMouse>;
        readonly default: HandleMouse | null;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    readonly type: {
        readonly type: PropType<FightingType>;
        readonly default: FightingType;
        readonly validator?: ((value: FightingType) => boolean) | undefined;
    };
    /** 类名列表 */
    readonly close: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly round: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly background: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly color: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly beforeIcon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly afterIcon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly size: {
        readonly type: PropType<FightingSize>;
        readonly default: FightingSize;
        readonly validator?: ((value: FightingSize) => boolean) | undefined;
    };
    readonly simple: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly block: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly line: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly onClose: {
        readonly type: PropType<HandleMouse>;
        readonly default: HandleMouse | null;
    };
    readonly onClick: {
        readonly type: PropType<HandleMouse>;
        readonly default: HandleMouse | null;
    };
}>>, {
    readonly size: FightingSize;
    readonly type: FightingType;
    readonly close: boolean;
    readonly simple: boolean;
    readonly round: boolean;
    readonly background: string;
    readonly color: string;
    readonly beforeIcon: FightingIcon;
    readonly onClose: HandleMouse;
    readonly block: boolean;
    readonly afterIcon: FightingIcon;
    readonly onClick: HandleMouse;
    readonly line: boolean;
}, {}>;
export default _sfc_main;
