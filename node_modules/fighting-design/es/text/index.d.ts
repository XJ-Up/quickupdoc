import type { TextDecoration } from './src/interface';
import type { FightingType } from '..';
import type { DefineComponent, PropType, ComponentOptionsMixin, PublicProps, ExtractPropTypes } from 'vue';
import type { Install } from '../_utils';
import Text from "./src/text";
export declare const FText: Install<DefineComponent<{
    readonly type: {
        readonly type: PropType<FightingType>;
        readonly default: FightingType;
        readonly validator?: ((value: FightingType) => boolean) | undefined;
    };
    readonly size: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly color: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly background: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly block: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly spacing: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly lineHeight: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly indent: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly bold: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly decoration: {
        readonly type: PropType<TextDecoration>;
        readonly default: TextDecoration;
        readonly validator?: ((value: TextDecoration) => boolean) | undefined;
    };
    readonly padding: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly width: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly ellipsis: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly center: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    readonly type: {
        readonly type: PropType<FightingType>;
        readonly default: FightingType;
        readonly validator?: ((value: FightingType) => boolean) | undefined;
    };
    readonly size: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly color: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly background: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly block: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly spacing: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly lineHeight: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly indent: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly bold: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly decoration: {
        readonly type: PropType<TextDecoration>;
        readonly default: TextDecoration;
        readonly validator?: ((value: TextDecoration) => boolean) | undefined;
    };
    readonly padding: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly width: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly ellipsis: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly center: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
}>>, {
    readonly size: string | number;
    readonly type: FightingType;
    readonly bold: boolean;
    readonly center: boolean;
    readonly background: string;
    readonly color: string;
    readonly width: string | number;
    readonly padding: string | number;
    readonly block: boolean;
    readonly spacing: string | number;
    readonly lineHeight: string | number;
    readonly indent: string | number;
    readonly decoration: TextDecoration;
    readonly ellipsis: boolean;
}, {}>>;
/** text 组件实例类型 */
export type TextInstance = InstanceType<typeof Text>;
export * from './src/interface';
export default FText;
