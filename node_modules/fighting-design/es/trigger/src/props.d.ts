import type { ExtractPropTypes, InjectionKey, PropType } from 'vue';
import type { TriggerTrigger, TriggerProvide, TriggerChange } from './interface';
export declare const Props: {
    /** 触发器和内容之间的间距 */
    readonly spacing: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    /** 是否禁用 */
    readonly disabled: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /**
     * 触发方式：移入、点击
     *
     * @values hover click
     * @default hover
     */
    readonly trigger: {
        readonly type: PropType<TriggerTrigger>;
        readonly default: TriggerTrigger;
        readonly validator?: ((value: TriggerTrigger) => boolean) | undefined;
    };
    readonly width: {
        readonly type: PropType<string | number>;
        readonly default: () => null;
    };
    /** 是否带有箭头 */
    readonly arrow: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /** 弹出动画持续时间 */
    readonly enterDuration: {
        readonly type: NumberConstructor; /** 弹窗状态改变时触发的回调 */
        readonly default: number | undefined;
    };
    /** 关闭动画持续时间 */
    readonly leaveDuration: {
        readonly type: NumberConstructor; /** 弹窗状态改变时触发的回调 */
        readonly default: number | undefined;
    };
    /** 弹窗状态改变时触发的回调 */
    readonly onChange: {
        readonly type: PropType<TriggerChange>;
        readonly default: TriggerChange | null;
    };
    /** 弹窗状态打开时触发的回调 */
    readonly onOpen: {
        readonly type: PropType<TriggerChange>;
        readonly default: TriggerChange | null;
    };
    /** 弹窗状态关闭时触发的回调 */
    readonly onClose: {
        readonly type: PropType<TriggerChange>;
        readonly default: TriggerChange | null;
    };
};
/** trigger 组件 props 类型 */
export type TriggerProps = ExtractPropTypes<typeof Props>;
/** trigger 组件注入的关闭方法依赖项 */
export declare const TRIGGER_CLOSE_KEY: InjectionKey<TriggerProvide>;
