import type { FightingIcon, HandleMouse } from '../..';
import type { DefineComponent, PropType, ComponentOptionsMixin, PublicProps, ExtractPropTypes } from 'vue';
declare const _sfc_main: DefineComponent<{
    readonly size: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly round: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly disabled: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly color: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly hoverColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly icon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly onClick: {
        readonly type: PropType<HandleMouse>;
        readonly default: HandleMouse | null;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    readonly size: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly round: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly disabled: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly color: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly hoverColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly icon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly onClick: {
        readonly type: PropType<HandleMouse>;
        readonly default: HandleMouse | null;
    };
}>>, {
    readonly size: string | number;
    readonly round: boolean;
    readonly color: string;
    readonly icon: FightingIcon;
    readonly disabled: boolean;
    readonly onClick: HandleMouse;
    readonly hoverColor: string;
}, {}>;
export default _sfc_main;
