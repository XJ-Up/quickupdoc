import type { FightingType } from '..';
import type { ProgressState } from './src/interface';
import type { DefineComponent, PropType, ComponentOptionsMixin, PublicProps, ExtractPropTypes } from 'vue';
import type { Install } from '../_utils';
import Progress from "./src/progress";
export declare const FProgress: Install<DefineComponent<{
    readonly percentage: {
        readonly type: NumberConstructor;
        readonly default: number | undefined;
    };
    readonly state: {
        readonly type: PropType<ProgressState>;
        readonly default: ProgressState;
        readonly validator?: ((value: ProgressState) => boolean) | undefined;
    };
    readonly type: {
        readonly type: PropType<FightingType>;
        readonly default: FightingType;
        readonly validator?: ((value: FightingType) => boolean) | undefined;
    };
    readonly height: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly showText: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly diameter: {
        readonly type: NumberConstructor;
        readonly default: number | undefined;
    };
    readonly outsideText: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly textColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly color: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly background: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly stripe: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    readonly percentage: {
        readonly type: NumberConstructor;
        readonly default: number | undefined;
    };
    readonly state: {
        readonly type: PropType<ProgressState>;
        readonly default: ProgressState;
        readonly validator?: ((value: ProgressState) => boolean) | undefined;
    };
    readonly type: {
        readonly type: PropType<FightingType>;
        readonly default: FightingType;
        readonly validator?: ((value: FightingType) => boolean) | undefined;
    };
    readonly height: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly showText: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly diameter: {
        readonly type: NumberConstructor;
        readonly default: number | undefined;
    };
    readonly outsideText: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly textColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly color: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly background: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly stripe: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
}>>, {
    readonly type: FightingType;
    readonly background: string;
    readonly color: string;
    readonly height: string | number;
    readonly state: ProgressState;
    readonly textColor: string;
    readonly percentage: number;
    readonly showText: boolean;
    readonly diameter: number;
    readonly outsideText: boolean;
    readonly stripe: boolean;
}, {}>>;
/** progress 组件实例类型 */
export type ProgressInstance = InstanceType<typeof Progress>;
export * from './src/interface';
export default FProgress;
