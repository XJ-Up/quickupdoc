import { defineComponent as d, inject as f, computed as o, openBlock as i, createElementBlock as n, normalizeClass as v, unref as r, normalizeStyle as _, createElementVNode as g, toDisplayString as h, createCommentVNode as y } from "vue";
import { PROGRESS_PROPS_KEY as x } from "../../src/index3.js";
import { PROGRESS_CIRCLE_PADDING as l } from "../../../_tokens/key/index4.js";
import { isNumber as S } from "../../../_utils/is/index.js";
import { useList as k } from "../../../_hooks/use-list/index.js";
const P = ["width", "height", "aria-value"], C = ["cx", "cy", "r"], E = ["x", "y"];
var G = /* @__PURE__ */ d({
  name: "FProgressCircle",
  __name: "index",
  setup(R) {
    const e = f(x), { classes: c } = k(e, "progress"), u = c(["type", "state"], "f-progress"), t = o(() => S(e.diameter) ? e.diameter / 2 : 100), s = o(() => (t.value - l) * 2 * Math.PI), m = o(() => {
      const a = s.value - s.value * (e.percentage / 100);
      return a <= 0 ? 0 : a > s.value ? s.value : a;
    }), p = o(() => ({
      "--progress-stroke-dasharray": s.value,
      "--progress-stroke-dashoffset": m.value
    }));
    return (a, w) => (i(), n("svg", {
      role: "progressbar",
      class: v(r(u)),
      width: r(e).diameter,
      height: r(e).diameter,
      style: _(p.value),
      "aria-value": r(e).percent,
      "aria-valuemin": 0,
      "aria-valuemax": 100
    }, [
      g("circle", {
        class: "f-progress__girth",
        fill: "transparent",
        "stroke-width": "12",
        stroke: "green",
        cx: t.value,
        cy: t.value,
        r: t.value - r(l)
      }, null, 8, C),
      r(e).showText ? (i(), n("text", {
        key: 0,
        "font-size": "24",
        fill: "grey",
        "text-anchor": "middle",
        "alignment-baseline": "middle",
        x: t.value,
        y: t.value
      }, h(r(e).percent) + "% ", 9, E)) : y("", !0)
    ], 14, P));
  }
});
export {
  G as default
};
