import type { LinkState } from './src/interface';
import type { FightingType, FightingTarget, FightingIcon, HandleEvent } from '..';
import type { DefineComponent, PropType, ComponentOptionsMixin, PublicProps, ExtractPropTypes } from 'vue';
import type { Install } from '../_utils';
import Link from "./src/link";
export declare const FLink: Install<DefineComponent<{
    readonly type: {
        readonly type: PropType<FightingType>;
        readonly default: FightingType;
        readonly validator?: ((value: FightingType) => boolean) | undefined;
    };
    readonly href: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly size: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly state: {
        readonly type: PropType<LinkState>;
        readonly default: LinkState;
        readonly validator?: ((value: LinkState) => boolean) | undefined;
    };
    readonly disabled: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly target: {
        readonly type: PropType<FightingTarget>;
        readonly default: FightingTarget;
        readonly validator?: ((value: FightingTarget) => boolean) | undefined;
    };
    readonly color: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly hoverColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly noCopy: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly noLink: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly beforeIcon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly afterIcon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly onClick: {
        readonly type: PropType<HandleEvent>;
        readonly default: HandleEvent | null;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    readonly type: {
        readonly type: PropType<FightingType>;
        readonly default: FightingType;
        readonly validator?: ((value: FightingType) => boolean) | undefined;
    };
    readonly href: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly size: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly state: {
        readonly type: PropType<LinkState>;
        readonly default: LinkState;
        readonly validator?: ((value: LinkState) => boolean) | undefined;
    };
    readonly disabled: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly target: {
        readonly type: PropType<FightingTarget>;
        readonly default: FightingTarget;
        readonly validator?: ((value: FightingTarget) => boolean) | undefined;
    };
    readonly color: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly hoverColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly noCopy: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly noLink: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly beforeIcon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly afterIcon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly onClick: {
        readonly type: PropType<HandleEvent>;
        readonly default: HandleEvent | null;
    };
}>>, {
    readonly size: string | number;
    readonly type: FightingType;
    readonly color: string;
    readonly beforeIcon: FightingIcon;
    readonly href: string;
    readonly target: FightingTarget;
    readonly disabled: boolean;
    readonly afterIcon: FightingIcon;
    readonly onClick: HandleEvent;
    readonly hoverColor: string;
    readonly state: LinkState;
    readonly noCopy: boolean;
    readonly noLink: boolean;
}, {}>>;
/** link 组件实例型 */
export type LinkInstance = InstanceType<typeof Link>;
export * from './src/interface';
export default FLink;
