import { defineComponent as C, mergeModels as V, useModel as F, computed as y, openBlock as a, createElementBlock as h, normalizeClass as v, createBlock as z, unref as n, createCommentVNode as t, createElementVNode as g, createVNode as m, withCtx as I } from "vue";
import { Props as w } from "./index3.js";
import { FInput as N } from "../../input/index.js";
import { FButton as r } from "../../button/index.js";
import B from "../../_svg/f-icon-chevron-left/index.js";
import M from "../../_svg/f-icon-chevron-up/index.js";
import T from "../../_svg/f-icon-chevron-down/index.js";
import D from "../../_svg/f-icon-chevron-right/index.js";
import { isNumber as k } from "../../_utils/is/index.js";
import { useRun as E } from "../../_hooks/use-run/index.js";
const R = { class: "f-input-number__wrapper" };
var O = /* @__PURE__ */ C({
  name: "FInputNumber",
  __name: "input-number",
  props: /* @__PURE__ */ V(w, {
    modelValue: { default: 0, type: Number },
    modelModifiers: {}
  }),
  emits: ["update:modelValue"],
  setup(d) {
    const i = d, l = F(d, "modelValue"), { run: p } = E(), b = y(() => {
      const { step: e, min: o } = i;
      return !o && !k(o) ? !1 : l.value - Math.abs(e) < o;
    }), f = y(() => {
      const { step: e, max: o } = i;
      return !o && !k(o) ? !1 : l.value + Math.abs(e) > o;
    }), u = (e) => {
      const { disabled: o, readonly: s, step: c } = i;
      if (o || s)
        return;
      p({
        /** 减少 */
        minus: () => {
          l.value -= c;
        },
        /** 增加 */
        plus: () => {
          l.value += c;
        }
      }[e]), p(i.onChange, l.value);
    };
    return (e, o) => (a(), h("div", {
      role: "input",
      class: v(["f-input-number", { "f-input-number__button": e.model === "button" }])
    }, [
      e.model === "button" ? (a(), z(n(r), {
        key: 0,
        class: "f-input-number__minus",
        type: e.buttonType || "primary",
        size: e.size,
        disabled: e.disabled || b.value,
        "before-icon": n(B),
        "on-click": () => u("minus")
      }, null, 8, ["type", "size", "disabled", "before-icon", "on-click"])) : t("", !0),
      g("div", R, [
        m(n(N), {
          modelValue: l.value,
          "onUpdate:modelValue": o[0] || (o[0] = (s) => l.value = s),
          type: "number",
          max: e.max,
          min: e.min,
          disabled: e.disabled,
          readonly: e.readonly,
          autofocus: e.autofocus,
          name: e.name,
          size: e.size,
          clear: e.clear,
          placeholder: e.placeholder,
          "on-blur": e.onBlur,
          "on-focus": e.onFocus,
          "on-input": e.onInput,
          "on-change": e.onChange
        }, {
          after: I(() => [
            e.model === "switch" ? (a(), h("div", {
              key: 0,
              class: v(["f-input-number__switch", `f-input-number__switch-${e.size}`])
            }, [
              m(n(r), {
                disabled: e.disabled || f.value,
                size: e.size,
                type: e.buttonType || "default",
                "before-icon": n(M),
                onclick: () => u("plus")
              }, null, 8, ["disabled", "size", "type", "before-icon", "onclick"]),
              m(n(r), {
                disabled: e.disabled || b.value,
                size: e.size,
                type: e.buttonType || "default",
                "before-icon": n(T),
                "on-click": () => u("minus")
              }, null, 8, ["disabled", "size", "type", "before-icon", "on-click"])
            ], 2)) : t("", !0)
          ]),
          _: 1
        }, 8, ["modelValue", "max", "min", "disabled", "readonly", "autofocus", "name", "size", "clear", "placeholder", "on-blur", "on-focus", "on-input", "on-change"])
      ]),
      e.model === "button" ? (a(), z(n(r), {
        key: 1,
        class: "f-input-number__plus",
        type: e.buttonType || "primary",
        size: e.size,
        disabled: e.disabled || f.value,
        "before-icon": n(D),
        "on-click": () => u("plus")
      }, null, 8, ["type", "size", "disabled", "before-icon", "on-click"])) : t("", !0)
    ], 2));
  }
});
export {
  O as default
};
