import { defineComponent as z, mergeModels as A, useModel as I, openBlock as s, createBlock as _, Teleport as M, createVNode as u, Transition as h, unref as o, withCtx as d, withDirectives as p, createElementVNode as t, normalizeClass as V, normalizeStyle as O, createElementBlock as i, createCommentVNode as a, withModifiers as S, renderSlot as l, toDisplayString as T, vShow as v } from "vue";
import { Props as D } from "./index3.js";
import { FCloseBtn as N } from "../../close-btn/index.js";
import { useVisible as F } from "../../_hooks/use-visible/index.js";
import { useTransition as H } from "../../_hooks/use-transition/index.js";
import { useList as P } from "../../_hooks/use-list/index.js";
const j = {
  key: 0,
  class: "f-dialog__mask"
}, q = { class: "f-dialog__container" }, G = {
  key: 0,
  class: "f-dialog__header"
}, J = { class: "f-dialog__header-before" }, K = { class: "f-dialog__header-center" }, Q = { class: "f-dialog__header-after" }, R = {
  key: 1,
  class: "f-dialog__body"
}, U = {
  key: 2,
  class: "f-dialog__footer"
};
var oe = /* @__PURE__ */ z({
  name: "FDialog",
  __name: "dialog",
  props: /* @__PURE__ */ A(D, {
    visible: { type: Boolean, default: !1, type: Boolean },
    visibleModifiers: {}
  }),
  emits: ["update:visible"],
  setup(f) {
    const r = f, n = I(f, "visible"), { styles: g, classes: k } = P(r, "dialog"), { closeVisible: y, maskClose: c } = F(r, n), { handleOpen: B, handleOpenEnd: b, handleClose: C, handleCloseEnd: w } = H(r), E = g(
      ["width", "zIndex", "maskBackground", "maskOpacity"],
      ["maskOpacity", "zIndex"]
    ), $ = k(["fullscreen", "maskBlur"], "f-dialog");
    return (e, m) => (s(), _(M, {
      to: "body",
      disabled: !e.appendToBody
    }, [
      u(h, {
        name: "f-dialog__trans",
        onBeforeEnter: o(B),
        onAfterEnter: o(b),
        onBeforeLeave: o(C),
        onAfterLeave: o(w)
      }, {
        default: d(() => [
          p(t("div", {
            role: "dialog",
            "aria-modal": "true",
            tabindex: "-1",
            class: V(o($)),
            style: O(o(E))
          }, [
            e.showMask ? (s(), i("div", j)) : a("", !0),
            t("div", {
              class: "f-dialog__wrapper",
              onClick: m[0] || (m[0] = S(
                //@ts-ignore
                (...L) => o(c) && o(c)(...L),
                ["self"]
              ))
            }, [
              u(h, { name: "f-dialog__container-trans" }, {
                default: d(() => [
                  p(t("div", q, [
                    e.showHeader ? (s(), i("header", G, [
                      t("div", J, [
                        l(e.$slots, "headerBefore")
                      ]),
                      t("div", K, T(e.title), 1),
                      t("div", Q, [
                        l(e.$slots, "headerAfter", {}, () => [
                          e.showCloseIcon ? (s(), _(o(N), {
                            key: 0,
                            round: "",
                            color: "#3c4043",
                            size: 30,
                            icon: e.closeIcon,
                            "on-click": o(y)
                          }, {
                            default: d(() => [
                              l(e.$slots, "closeIcon")
                            ]),
                            _: 3
                          }, 8, ["icon", "on-click"])) : a("", !0)
                        ])
                      ])
                    ])) : a("", !0),
                    e.$slots.default ? (s(), i("section", R, [
                      l(e.$slots, "default")
                    ])) : a("", !0),
                    e.$slots.footer ? (s(), i("footer", U, [
                      l(e.$slots, "footer")
                    ])) : a("", !0)
                  ], 512), [
                    [v, n.value]
                  ])
                ]),
                _: 3
              })
            ])
          ], 6), [
            [v, n.value]
          ])
        ]),
        _: 3
      }, 8, ["onBeforeEnter", "onAfterEnter", "onBeforeLeave", "onAfterLeave"])
    ], 8, ["disabled"]));
  }
});
export {
  oe as default
};
