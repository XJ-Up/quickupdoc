import { defineComponent as M, mergeModels as S, useModel as b, ref as y, openBlock as t, createElementBlock as a, Fragment as c, createElementVNode as d, withModifiers as F, renderSlot as D, createVNode as f, unref as s, withCtx as z, createTextVNode as B, renderList as $, toDisplayString as E, createBlock as P, createCommentVNode as p, watch as T, toRefs as A } from "vue";
import { Props as U } from "./index3.js";
import { FButton as j } from "../../button/index.js";
import { FSvgIcon as L } from "../../svg-icon/index.js";
import { FCloseBtn as q } from "../../close-btn/index.js";
import G from "../../_svg/f-icon-plus/index.js";
import H from "../../_svg/f-icon-notes/index.js";
import { useRun as J } from "../../_hooks/use-run/index.js";
const K = { class: "f-up-load" }, O = ["name", "disabled", "accept", "multiple"], Q = {
  key: 0,
  class: "f-up-load__file-list"
}, W = { class: "f-up-load__file-name" };
var ne = /* @__PURE__ */ M({
  name: "FUpLoad",
  __name: "up-load",
  props: /* @__PURE__ */ S(U, {
    files: { default: [], type: Array },
    filesModifiers: {}
  }),
  emits: ["update:files"],
  setup(m) {
    const i = m, n = b(m, "files"), { run: v } = J(), h = y(!1), u = y(), g = () => {
      u.value && u.value.click();
    }, k = (e) => {
      n.value = [...n.value, ...e], v(i.onLoad, e);
    }, _ = (e) => {
      const { maxSize: l, maxLength: r } = A(i);
      let o = [...e];
      return l.value && (o = o.filter((C) => C.size < l.value)), r.value && (o = o.splice(0, r.value)), o;
    }, N = (e) => {
      const l = e.target.files;
      l && k(_(l));
    }, R = (e) => {
      n.value.splice(e, 1);
    }, V = (e) => {
      e.preventDefault(), h.value = !0;
    }, w = (e) => {
      h.value = !1;
      const l = e.dataTransfer.files;
      l && k(_(l));
    }, I = () => {
      T(
        () => i.files,
        () => {
          v(i.onChange, n.value);
        },
        { deep: !0 }
      );
    };
    return i.onChange && I(), (e, l) => (t(), a(c, null, [
      d("div", K, [
        e.drag ? (t(), a("div", {
          key: 0,
          class: "f-up-load__drag",
          onClick: g,
          onDrop: F(w, ["prevent"]),
          onDragover: F(V, ["prevent"])
        }, [
          D(e.$slots, "default", {}, () => [
            f(s(L), { icon: s(G) }, null, 8, ["icon"])
          ])
        ], 32)) : (t(), a("div", {
          key: 1,
          class: "f-up-load__content",
          onClick: g
        }, [
          D(e.$slots, "default", {}, () => [
            f(s(j), null, {
              default: z(() => [
                B("选择文件")
              ]),
              _: 1
            })
          ])
        ])),
        d("input", {
          ref_key: "inputRef",
          ref: u,
          type: "file",
          hidden: "",
          name: e.name,
          disabled: e.disabled,
          accept: e.accept,
          multiple: e.multiple,
          onChange: N
        }, null, 40, O)
      ]),
      e.showList ? (t(), a(c, { key: 0 }, [
        n.value && n.value.length ? (t(), a("div", Q, [
          (t(!0), a(c, null, $(n.value, (r, o) => (t(), a("div", {
            key: o,
            class: "f-up-load__file-list-item"
          }, [
            d("div", W, [
              f(s(L), { icon: s(H) }, null, 8, ["icon"]),
              B(" " + E(r.name), 1)
            ]),
            e.isRemove ? (t(), P(s(q), {
              key: 0,
              size: 14,
              onClick: (C) => R(o)
            }, null, 8, ["onClick"])) : p("", !0)
          ]))), 128))
        ])) : p("", !0)
      ], 64)) : p("", !0)
    ], 64));
  }
});
export {
  ne as default
};
