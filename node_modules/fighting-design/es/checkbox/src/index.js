import { defineComponent as x, mergeModels as y, useModel as V, computed as s, inject as C, reactive as g, openBlock as n, createElementBlock as r, normalizeClass as B, unref as a, withDirectives as P, createElementVNode as i, vModelCheckbox as D, createCommentVNode as u, renderSlot as E, Fragment as M, createTextVNode as w, toDisplayString as A } from "vue";
import { Props as L } from "./index3.js";
import { CHECKBOX_GROUP_PROPS_KEY as N } from "../../checkbox-group/src/index3.js";
import { isArray as O, isBoolean as R } from "../../_utils/is/index.js";
import { useList as S } from "../../_hooks/use-list/index.js";
import { useRun as j } from "../../_hooks/use-run/index.js";
const F = ["value", "disabled"], K = {
  key: 0,
  class: "f-checkbox__box"
}, U = { class: "f-checkbox__text" };
var X = /* @__PURE__ */ x({
  name: "FCheckbox",
  __name: "checkbox",
  props: /* @__PURE__ */ y(L, {
    modelValue: { type: Boolean, default: !1, type: [Boolean, Array] },
    modelModifiers: {}
  }),
  emits: ["update:modelValue"],
  setup(d) {
    const o = d, m = V(d, "modelValue"), { run: b } = j(), t = s({
      get: () => l && l.modelValue || o.modelValue,
      set: (e) => {
        if (!l) {
          m.value = e, b(o.onChange, e);
          return;
        }
        l.setChange(e);
      }
    }), l = C(N, null), p = s(() => {
      const e = t.value;
      return O(e) ? e.includes(o.label) : R(e) ? e : e === o.label;
    }), f = s(
      () => !!(l && l.disabled)
    ), h = s(() => o.disabled || f.value), { classes: k } = S(
      g({
        checked: p,
        disabled: h
      }),
      "checkbox"
    ), v = k(["checked", "disabled"], "f-checkbox");
    return (e, c) => (n(), r("label", {
      role: "checkbox",
      "aria-checked": "false",
      tabindex: "0",
      "aria-labelledby": "chk1-label",
      class: B(a(v))
    }, [
      P(i("input", {
        "onUpdate:modelValue": c[0] || (c[0] = (_) => t.value = _),
        type: "checkbox",
        class: "f-checkbox__input",
        hidden: "",
        value: e.label,
        disabled: e.disabled || !!a(l) && a(l).disabled
      }, null, 8, F), [
        [D, t.value]
      ]),
      a(l) && a(l).background ? u("", !0) : (n(), r("span", K)),
      i("span", U, [
        E(e.$slots, "default"),
        !e.$slots.default && e.showLabel ? (n(), r(M, { key: 0 }, [
          w(A(e.label), 1)
        ], 64)) : u("", !0)
      ])
    ], 2));
  }
});
export {
  X as default
};
