import type { MessageClose } from '../../message';
import type { RendererNode, RendererElement, VNode,  PropType,  ExtractPropTypes } from 'vue';
import type { NotificationPlacement } from './interface';
import type { FightingType, FightingIcon } from '../../_interface';
export declare const Props: {
    /** 通知标题 */
    readonly title: {
        readonly type: PropType<string | VNode<RendererNode, RendererElement, {
            [key: string]: any;
        }>>;
        readonly default: () => null;
    };
    /** 通知文本 */
    readonly message: {
        readonly type: PropType<string | VNode<RendererNode, RendererElement, {
            [key: string]: any;
        }>>;
        readonly default: () => null;
    };
    /**
     * 消息类型
     *
     * @values default primary success danger warning
     */
    readonly type: {
        readonly type: PropType<FightingType>;
        readonly default: FightingType;
        readonly validator?: ((value: FightingType) => boolean) | undefined;
    };
    /** 是否可关闭 */
    readonly close: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /** 显示时间，单位为毫秒。 设为 0 则不会自动关闭 */
    readonly duration: {
        readonly type: NumberConstructor;
        readonly default: number | undefined;
    };
    /** 是否为圆角类型 */
    readonly round: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /** 是否显示按钮 */
    readonly showIcon: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /** 自定义前缀 icon */
    readonly icon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    /** 自定义字体颜色 */
    readonly color: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    /** 自定义背景色 */
    readonly background: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    /** 偏移距离 */
    readonly offset: {
        readonly type: NumberConstructor;
        readonly default: number | undefined;
    };
    /**
     * 弹出位置
     *
     * @values top-left top-right bottom-left bottom-right
     * @default top-right
     */
    readonly placement: {
        readonly type: PropType<NotificationPlacement>;
        readonly default: NotificationPlacement;
        readonly validator?: ((value: NotificationPlacement) => boolean) | undefined;
    };
    /** 层级 */
    readonly zIndex: {
        readonly type: NumberConstructor;
        readonly default: number | undefined;
    };
    /** 自定义关闭按钮 */
    readonly closeBtn: {
        readonly type: PropType<string | VNode<RendererNode, RendererElement, {
            [key: string]: any;
        }>>;
        readonly default: () => null;
    };
    /** 关闭之后回调 */
    readonly onClose: {
        readonly type: PropType<MessageClose>;
        readonly default: MessageClose | null;
    };
};
/** notification 组件 props 类型 */
export type NotificationProps = ExtractPropTypes<typeof Props>;
