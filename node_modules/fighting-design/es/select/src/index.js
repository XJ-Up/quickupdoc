import { defineComponent as R, mergeModels as $, useSlots as N, useModel as P, ref as f, computed as y, watch as B, onBeforeUnmount as L, provide as M, reactive as T, toRef as C, openBlock as D, createElementBlock as U, normalizeStyle as q, unref as r, createVNode as m, withCtx as p, createElementVNode as H, renderSlot as K, normalizeClass as j, nextTick as A } from "vue";
import { Props as G, SELECT_PROPS_TOKEN as J } from "./index3.js";
import { FInput as Q } from "../../input/index.js";
import { FDropdown as W } from "../../dropdown/index.js";
import { FSvgIcon as X } from "../../svg-icon/index.js";
import Y from "../../_svg/f-icon-chevron-down/index.js";
import { getChildren as Z } from "../../_utils/get-children/index.js";
import { useList as x } from "../../_hooks/use-list/index.js";
import { isFunction as ee } from "../../_utils/is/index.js";
import { useRun as le } from "../../_hooks/use-run/index.js";
var fe = /* @__PURE__ */ R({
  name: "FSelect",
  __name: "select",
  props: /* @__PURE__ */ $(G, {
    modelValue: {
      default: "",
      type: [String, Number]
    },
    modelModifiers: {}
  }),
  emits: ["update:modelValue"],
  setup(v) {
    const o = v, h = N(), a = P(v, "modelValue"), { run: F } = le(), { styles: k } = x(o, "select"), s = f([]), z = k(["width"]), u = f(!1), d = f(), t = y(() => h.default ? Z(h.default(), "FOption") : []), c = y({
      get: () => {
        var V, g;
        if (!t.value.length)
          return "";
        const e = t.value.filter((S) => {
          const i = S.props;
          return i ? i.value ? `${i.value}` == `${o.modelValue}` : `${i.label}` == `${o.modelValue}` : S.children.default()[0].children === o.modelValue;
        });
        if (!e.length)
          return "";
        const l = e[0], n = l.children && l.children.default()[0].children, O = (V = l.props) == null ? void 0 : V.label, w = (g = l.props) == null ? void 0 : g.value;
        return n || O || w && w.toString() || "";
      },
      set: (e) => (a.value = e, e)
    }), _ = (e, l, n) => {
      c.value = e.toString(), l !== o.modelValue && F(o.onChange, e, l, n), a.value = e;
    }, E = () => {
      (!t.value || !t.value.length) && (s.value = []), s.value = t.value.map((e) => {
        const l = e.children && e.children.default()[0].children;
        return { slot: l, show: !!(l && l.includes(a.value.toString())) };
      });
    }, I = async () => {
      await A(), s.value = t.value.map((l) => ({ slot: l.children && l.children.default()[0].children, show: !0 }));
      const e = d.value && d.value.querySelector(".f-option.f-option__active");
      e && ee(e.scrollIntoView) && e.scrollIntoView({ block: "end" });
    }, b = (() => {
      if (o.filter)
        return B(() => a.value, E, {
          immediate: !0
        });
    })();
    return L(() => {
      b && b();
    }), M(
      J,
      T({
        setValue: _,
        childrenLabels: s,
        modelValue: C(o, "modelValue"),
        filter: C(o, "filter")
      })
    ), (e, l) => (D(), U("div", {
      class: "f-select",
      style: q(r(z))
    }, [
      m(r(W), {
        trigger: "click",
        disabled: e.disabled,
        width: e.width,
        "on-open": I
      }, {
        content: p(() => [
          H("div", {
            ref_key: "secletContentRef",
            ref: d,
            class: "f-select__content"
          }, [
            K(e.$slots, "default")
          ], 512)
        ]),
        default: p(() => [
          m(r(Q), {
            modelValue: c.value,
            "onUpdate:modelValue": l[0] || (l[0] = (n) => c.value = n),
            readonly: !e.filter,
            name: e.name,
            size: e.size,
            disabled: e.disabled,
            placeholder: e.placeholder,
            clear: e.clear,
            "on-focus": () => u.value = !0,
            "on-blur": () => u.value = !1
          }, {
            after: p(() => [
              m(r(X), {
                color: "#bababa",
                class: j(["f-select__arrow", { "f-select__arrow-active": u.value }]),
                size: 13,
                icon: r(Y)
              }, null, 8, ["class", "icon"])
            ]),
            _: 1
          }, 8, ["modelValue", "readonly", "name", "size", "disabled", "placeholder", "clear", "on-focus", "on-blur"])
        ]),
        _: 3
      }, 8, ["disabled", "width"])
    ], 4));
  }
});
export {
  fe as default
};
