import { defineComponent as L, mergeModels as M, useModel as D, ref as w, watchEffect as O, computed as T, openBlock as s, createElementBlock as g, normalizeClass as $, unref as o, normalizeStyle as K, createElementVNode as z, renderSlot as m, createBlock as p, createCommentVNode as u, withDirectives as R, withKeys as U, vModelDynamic as G, createVNode as j, withCtx as q, createTextVNode as A, toDisplayString as H, toRefs as J } from "vue";
import { Props as Q } from "./index3.js";
import { FSvgIcon as d } from "../../svg-icon/index.js";
import { FButton as W } from "../../button/index.js";
import { FSwap as X } from "../../swap/index.js";
import Y from "../../_svg/f-icon-cross/index.js";
import Z from "../../_svg/f-icon-eye-outline/index.js";
import x from "../../_svg/f-icon-eye-off-outline/index.js";
import { useInput as _ } from "../../_hooks/use-input/index.js";
import { useGlobal as ee } from "../../_hooks/use-global/index.js";
import { useList as oe } from "../../_hooks/use-list/index.js";
import { useRun as ne } from "../../_hooks/use-run/index.js";
const le = { class: "f-input__wrapper" }, te = ["type", "max", "min", "disabled", "readonly", "autofocus", "name", "autocomplete", "placeholder", "maxlength"];
var ve = /* @__PURE__ */ L({
  name: "FInput",
  __name: "input",
  props: /* @__PURE__ */ M(Q, {
    modelValue: {
      default: "",
      type: [String, Number]
    },
    modelModifiers: {}
  }),
  emits: ["update:modelValue"],
  setup(f) {
    const t = f, a = D(f, "modelValue"), { run: c } = ne(), { getLang: V, getProp: k } = ee(t), { styles: C, classes: S } = oe(k(["size"]), "input"), { handleInput: h, handleClear: F, handleChange: y } = _(t, a), r = w(!1), i = w(t.type);
    O(() => {
      i.value = t.type;
    });
    const I = T(() => V("input").value.search), v = (e) => {
      c(t.onSearch, a.value, e);
    }, b = (e) => {
      const { search: n, enterSearch: l, onEnter: P } = J(t);
      n.value && l.value && v(e), c(P.value, a.value, e);
    }, B = () => {
      if (r.value) {
        i.value = "text", r.value = !0;
        return;
      }
      i.value = "password", r.value = !1;
    }, E = C(["placeholderColor", "textColor", "width", "height", "fontSize"]), N = S(["size", "disabled", "search"], "f-input");
    return (e, n) => (s(), g("div", {
      role: "input",
      class: $(o(N)),
      style: K(o(E))
    }, [
      z("div", le, [
        m(e.$slots, "before"),
        e.icon ? (s(), p(o(d), {
          key: 0,
          class: "f-input__icon",
          icon: e.icon,
          size: 13
        }, null, 8, ["icon"])) : u("", !0),
        R(z("input", {
          "onUpdate:modelValue": n[0] || (n[0] = (l) => a.value = l),
          class: "f-input__input",
          type: i.value,
          max: e.max,
          min: e.min,
          disabled: e.disabled,
          readonly: e.readonly,
          autofocus: e.autofocus,
          name: e.name,
          autocomplete: e.autocomplete,
          placeholder: e.placeholder,
          maxlength: e.maxLength,
          onInput: n[1] || (n[1] = //@ts-ignore
          (...l) => o(h) && o(h)(...l)),
          onChange: n[2] || (n[2] = //@ts-ignore
          (...l) => o(y) && o(y)(...l)),
          onKeyup: U(b, ["enter"]),
          onBlur: n[3] || (n[3] = //@ts-ignore
          (...l) => e.onBlur && e.onBlur(...l)),
          onFocus: n[4] || (n[4] = //@ts-ignore
          (...l) => e.onFocus && e.onFocus(...l))
        }, null, 40, te), [
          [G, a.value]
        ]),
        e.clear ? (s(), p(o(d), {
          key: 1,
          class: "f-input__clear-btn",
          icon: o(Y),
          size: 14,
          "on-click": o(F)
        }, null, 8, ["icon", "on-click"])) : u("", !0),
        e.afterIcon ? (s(), p(o(d), {
          key: 2,
          icon: e.afterIcon,
          size: 14
        }, null, 8, ["icon"])) : u("", !0),
        e.showPassword ? (s(), p(o(X), {
          key: 3,
          modelValue: r.value,
          "onUpdate:modelValue": n[5] || (n[5] = (l) => r.value = l),
          class: "f-input__show-password",
          type: "swap",
          "icon-on": o(Z),
          "icon-off": o(x),
          size: 14,
          "on-change": B
        }, null, 8, ["modelValue", "icon-on", "icon-off"])) : u("", !0),
        m(e.$slots, "after")
      ]),
      e.search ? (s(), g("div", {
        key: 0,
        class: "f-input__search",
        onClick: v
      }, [
        m(e.$slots, "searchBtn", {}, () => [
          j(o(W), {
            type: "primary",
            size: e.size
          }, {
            default: q(() => [
              A(H(I.value), 1)
            ]),
            _: 1
          }, 8, ["size"])
        ])
      ])) : u("", !0)
    ], 6));
  }
});
export {
  ve as default
};
