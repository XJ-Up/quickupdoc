import type { PropType, ExtractPropTypes } from 'vue';
import type { InputType, InputUpdate, InputEnter } from './interface';
import type { HandleEvent, FightingSize, FightingIcon } from '../../_interface';
export declare const Props: {
    /** 绑定值 */
    readonly modelValue: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    /**
     * 类型
     *
     * 文字输入框或者密码输入框
     *
     * @values text password number
     * @default text
     */
    readonly type: {
        readonly type: PropType<InputType>;
        readonly default: InputType;
        readonly validator?: ((value: InputType) => boolean) | undefined;
    };
    /**
     * 尺寸
     *
     * @values large middle small mini
     */
    readonly size: {
        readonly type: PropType<FightingSize>;
        readonly default: FightingSize;
        readonly validator?: ((value: FightingSize) => boolean) | undefined;
    };
    /**
     * 是否禁用
     *
     * @see disabled https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-disabled
     */
    readonly disabled: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /**
     * 最大（数字或日期时间）值
     *
     * @see max https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-max
     */
    readonly max: {
        readonly type: NumberConstructor;
        readonly default: number | undefined;
    };
    /**
     * 最小（数字或日期时间）值
     *
     * @see min https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-min
     */
    readonly min: {
        readonly type: NumberConstructor;
        readonly default: number | undefined;
    };
    /**
     * 最大输入长度
     *
     * @see maxLength https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-maxlength
     */
    readonly maxLength: {
        readonly type: NumberConstructor;
        readonly default: number | undefined;
    };
    /**
     * 设置字体大小
     *
     * @see font-size https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-size
     */
    readonly fontSize: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    /**
     * 是否自动获取焦点
     *
     * @see autofocus https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-autofocus
     */
    readonly autofocus: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /**
     * 原生 name 属性
     *
     * @see name https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-name
     */
    readonly name: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    /**
     * 占位符
     *
     * @see placeholder https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-placeholder
     */
    readonly placeholder: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    /** 占位符颜色 */
    readonly placeholderColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    /** 是否可清除 */
    readonly clear: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /** 自定义宽度 */
    readonly width: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    /** 自定义高度 */
    readonly height: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    /** 是否可搜索 */
    readonly search: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /** 自定义文字颜色 */
    readonly textColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    /**
     * 是否只读
     *
     * @see readonly https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-readonly
     */
    readonly readonly: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /** 是否显示查看密码的按钮 */
    readonly showPassword: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /** 是否按下回车进行搜索 */
    readonly enterSearch: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /** 自定义 icon */
    readonly icon: {
        readonly type: PropType<FightingIcon>; /** 自定义文字颜色 */
        readonly default: () => FightingIcon | null;
    };
    /** 后缀 icon */
    readonly afterIcon: {
        readonly type: PropType<FightingIcon>; /** 自定义文字颜色 */
        readonly default: () => FightingIcon | null;
    };
    /**
     * 是否开启自动填充特性提示
     *
     * 注意这不是一个布尔属性！
     *
     * 详情配置可参考
     *
     * @see HTML属性autocomplete https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/autocomplete
     * @see autocomplete https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#autocomplete
     */
    readonly autocomplete: {
        readonly type: PropType<"off">;
        readonly default: "off";
        readonly validator?: ((value: "off") => boolean) | undefined;
    };
    /** 点击搜索之后触发的回调 */
    readonly onSearch: {
        readonly type: PropType<InputUpdate>;
        readonly default: InputUpdate | null;
    };
    /** 绑定值发生改变时触发的回调 */
    readonly onChange: {
        readonly type: PropType<InputUpdate>;
        readonly default: InputUpdate | null;
    };
    /** input 事件触发的回调 */
    readonly onInput: {
        readonly type: PropType<InputUpdate>;
        readonly default: InputUpdate | null;
    };
    /** 失去焦点时触发的回调 */
    readonly onBlur: {
        readonly type: PropType<HandleEvent>;
        readonly default: HandleEvent | null;
    };
    /** 获得焦点时触发的回调 */
    readonly onFocus: {
        readonly type: PropType<HandleEvent>;
        readonly default: HandleEvent | null;
    };
    /** 按下回车触发的 */
    readonly onEnter: {
        readonly type: PropType<InputEnter>;
        readonly default: InputEnter | null;
    };
};
/** input 组件 props 类型 */
export type InputProps = ExtractPropTypes<typeof Props>;
