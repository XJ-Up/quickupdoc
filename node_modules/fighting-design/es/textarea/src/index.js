import { defineComponent as E, mergeModels as V, useModel as b, ref as z, onMounted as B, onBeforeUnmount as C, openBlock as m, createElementBlock as F, normalizeClass as I, unref as r, normalizeStyle as M, withDirectives as x, createElementVNode as L, vModelText as S, createBlock as K, createCommentVNode as N, watch as R, nextTick as T } from "vue";
import { Props as D } from "./index3.js";
import { FSvgIcon as U } from "../../svg-icon/index.js";
import A from "../../_svg/f-icon-cross/index.js";
import { useInput as P } from "../../_hooks/use-input/index.js";
import { useList as j } from "../../_hooks/use-list/index.js";
import { debounce as q } from "../../_utils/utils/index.js";
import { useRun as G } from "../../_hooks/use-run/index.js";
const J = ["rows", "disabled", "readonly", "autofocus", "placeholder", "name"];
var ee = /* @__PURE__ */ E({
  name: "FTextarea",
  __name: "textarea",
  props: /* @__PURE__ */ V(D, {
    modelValue: {
      default: "",
      type: [Number, String]
    },
    modelModifiers: {}
  }),
  emits: ["update:modelValue"],
  setup(i) {
    const o = i, l = b(i, "modelValue"), { handleInput: f, handleClear: c, handleChange: u } = P(o, l), { classes: p, styles: h } = j(o, "textarea"), { run: g } = G(), n = z(), y = p(["disabled", "autoHeight"], "f-textarea"), v = h(["resize", "fontSize"]), s = async () => {
      await T(), n.value && (n.value.style.height = "auto", n.value.style.height = n.value.scrollHeight + "px");
    }, w = (e) => {
      f(e), o.autoHeight && s();
    }, k = () => {
      const e = R(
        () => [o.modelValue, o.rows, o.autoHeight],
        () => {
          s(), o.autoHeight || (e(), n.value && (n.value.style.height = "auto"));
        },
        {
          immediate: !0
        }
      );
    }, d = q(s, 500);
    B(() => {
      o.autoHeight && (k(), window.addEventListener("resize", d));
    }), C(() => {
      window.removeEventListener("resize", d);
    });
    const H = (e) => {
      if (e.key === "Enter" && e.ctrlKey) {
        l.value += `
`, o.autoHeight && s();
        return;
      }
      e.key === "Enter" && (e.preventDefault(), g(o.onEnter, l.value, e));
    };
    return (e, t) => (m(), F("div", {
      class: I(r(y)),
      style: M(r(v))
    }, [
      x(L("textarea", {
        ref_key: "textareaRef",
        ref: n,
        "onUpdate:modelValue": t[0] || (t[0] = (a) => l.value = a),
        class: "f-textarea__textarea",
        rows: e.rows,
        disabled: e.disabled,
        readonly: e.readonly,
        autofocus: e.autofocus,
        placeholder: e.placeholder,
        name: e.name,
        onInput: w,
        onChange: t[1] || (t[1] = //@ts-ignore
        (...a) => r(u) && r(u)(...a)),
        onBlur: t[2] || (t[2] = //@ts-ignore
        (...a) => e.onBlur && e.onBlur(...a)),
        onFocus: t[3] || (t[3] = //@ts-ignore
        (...a) => e.onFocus && e.onFocus(...a)),
        onKeydown: H
      }, null, 40, J), [
        [S, l.value]
      ]),
      e.clear ? (m(), K(r(U), {
        key: 0,
        class: "f-textarea__clear-btn",
        icon: r(A),
        size: 14,
        "on-click": r(c)
      }, null, 8, ["icon", "on-click"])) : N("", !0)
    ], 6));
  }
});
export {
  ee as default
};
