import type { FightingSize } from '../..';
import type { DefineComponent, PropType, ComponentOptionsMixin, PublicProps, ExtractPropTypes } from 'vue';
declare const _sfc_main: DefineComponent<{
    readonly round: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly difference: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly animated: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly rows: {
        readonly type: NumberConstructor;
        readonly default: number | undefined;
    };
    readonly loading: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly rowGap: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly size: {
        readonly type: PropType<FightingSize>;
        readonly default: FightingSize;
        readonly validator?: ((value: FightingSize) => boolean) | undefined;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    readonly round: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly difference: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly animated: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly rows: {
        readonly type: NumberConstructor;
        readonly default: number | undefined;
    };
    readonly loading: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly rowGap: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly size: {
        readonly type: PropType<FightingSize>;
        readonly default: FightingSize;
        readonly validator?: ((value: FightingSize) => boolean) | undefined;
    };
}>>, {
    readonly size: FightingSize;
    readonly round: boolean;
    readonly loading: boolean;
    readonly difference: boolean;
    readonly animated: boolean;
    readonly rows: number;
    readonly rowGap: string | number;
}, {}>;
export default _sfc_main;
