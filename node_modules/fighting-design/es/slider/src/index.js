import { defineComponent as E, mergeModels as V, useModel as h, ref as f, onMounted as k, openBlock as b, createElementBlock as M, normalizeClass as g, unref as l, normalizeStyle as o, createElementVNode as r } from "vue";
import { Props as x } from "./index3.js";
import { useOffset as C } from "../../_hooks/use-offset/index.js";
import { useSlider as L } from "../../_hooks/use-slider/index.js";
import { useList as S } from "../../_hooks/use-list/index.js";
const w = { class: "f-slider__road" };
var F = /* @__PURE__ */ E({
  name: "FSlider",
  __name: "slider",
  props: /* @__PURE__ */ V(x, {
    modelValue: { default: 0, type: Number },
    modelModifiers: {}
  }),
  emits: ["update:modelValue"],
  setup(i) {
    const e = i, m = h(i, "modelValue"), { styles: u, classes: p } = S(e, "slider"), s = f(), t = f(), { offset: d, offsetLeft: _, setPosition: n } = C(s, e, m);
    k(() => {
      t.value && (L(t.value, _, (a) => {
        if (e.disabled)
          return;
        const c = a * 100 / s.value.clientWidth;
        n(c);
      }), n((e.modelValue - e.min) * 100 / (e.max - e.min)));
    });
    const v = p(["disabled"], "f-slider"), y = u(["background", "activeColor", "width"]);
    return (a, c) => (b(), M("div", {
      ref_key: "sliderEl",
      ref: s,
      role: "slider",
      class: g(l(v)),
      style: o(l(y))
    }, [
      r("div", w, [
        r("div", {
          class: "f-slider__selected",
          style: o(`width: ${l(d)}%`)
        }, null, 4),
        r("div", {
          ref_key: "circleEl",
          ref: t,
          class: "f-slider__icon",
          style: o(`left: ${l(d)}%`)
        }, null, 4)
      ])
    ], 6));
  }
});
export {
  F as default
};
