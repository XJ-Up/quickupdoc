import { defineComponent as f, ref as c, onMounted as m, onUnmounted as p, openBlock as v, createElementBlock as k, renderSlot as b } from "vue";
import { Props as y } from "./index3.js";
import { useWatermark as g } from "../../_hooks/use-watermark/index.js";
var h = /* @__PURE__ */ f({
  name: "FWatermark",
  __name: "watermark",
  props: y,
  setup(d) {
    const a = d, i = g(a), t = c();
    let e;
    const n = () => {
      if (!t.value)
        return;
      e && e.remove();
      const { base64: o, size: r } = i.value;
      e = document.createElement("div"), e.style.position = "absolute", e.style.backgroundImage = `url(${o})`, e.style.backgroundSize = `${r}px ${r}px`, e.style.zIndex = a.zIndex.toString(), e.style.inset = "0", t.value.appendChild(e);
    };
    m(n);
    const s = new MutationObserver((o) => {
      for (const r of o) {
        if (r.removedNodes && r.removedNodes.length) {
          const u = Array.from(r.removedNodes);
          for (const l of u)
            if (l === e) {
              n();
              return;
            }
        }
        if (r.target === e) {
          n();
          return;
        }
      }
    });
    return m(() => {
      t.value && s.observe(t.value, {
        /**
         * 监控子节点
         */
        childList: !0,
        /**
         * 监控子树
         */
        subtree: !0,
        /**
         * 监控属性
         */
        attributes: !0
      });
    }), p(s.disconnect), (o, r) => (v(), k("div", {
      ref_key: "watermarkRef",
      ref: t,
      class: "f-watermark"
    }, [
      b(o.$slots, "default")
    ], 512));
  }
});
export {
  h as default
};
