import { defineComponent as p, inject as f, reactive as u, getCurrentInstance as C, computed as d, openBlock as _, createElementBlock as b, normalizeStyle as h, unref as n, createElementVNode as v, renderSlot as S, createVNode as g } from "vue";
import { Props as I } from "./index3.js";
import { BREADCRUMB_PROPS_KEY as y } from "../../breadcrumb/src/index3.js";
import { FSvgIcon as z } from "../../svg-icon/index.js";
import B from "../../_svg/f-icon-chevron-right/index.js";
import { useList as k } from "../../_hooks/use-list/index.js";
const E = { class: "f-breadcrumb-item__text" };
var V = /* @__PURE__ */ p({
  name: "FBreadcrumbItem",
  __name: "breadcrumb-item",
  props: I,
  setup(c) {
    const e = c, o = f(y, null), { styles: s } = k(
      u({
        iconColor: e.iconColor || o && o.iconColor,
        fontColor: e.fontColor || o && o.fontColor,
        fontSize: o && o.fontSize
      }),
      "breadcrumb-item"
    ), a = C(), i = d(() => e.separator ? e.separator : o && o.separator ? o.separator : B), l = s(["fontColor", "iconColor", "fontSize"]), m = () => {
      const t = a.appContext.config.globalProperties.$router;
      if (t && e.to)
        try {
          t.push(e.to);
        } catch (r) {
          console.warn(r);
        }
    };
    return (t, r) => (_(), b("div", {
      class: "f-breadcrumb-item",
      style: h(n(l)),
      onClick: m
    }, [
      v("span", E, [
        S(t.$slots, "default")
      ]),
      g(n(z), {
        icon: i.value,
        size: 16
      }, null, 8, ["icon"])
    ], 4));
  }
});
export {
  V as default
};
