import type { DefineComponent, PropType, ComponentOptionsMixin, PublicProps, ExtractPropTypes } from 'vue';
import type { Install } from '../_utils';
import Option from "./src/option";
export declare const FOption: Install<DefineComponent<{
    readonly value: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly label: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly disabled: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    readonly value: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly label: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly disabled: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
}>>, {
    readonly value: string | number;
    readonly disabled: boolean;
    readonly label: string | number;
}, {}>>;
/** option 组件实例类型 */
export type OptionInstance = InstanceType<typeof Option>;
export * from './src/interface';
export default FOption;
