import type { HandleChange } from '..';
import type { DefineComponent, PropType, ComponentOptionsMixin, PublicProps, ExtractPropTypes } from 'vue';
import type { Install } from '../_utils';
import StickyCard from "./src/sticky-card";
export declare const FStickyCard: Install<DefineComponent<{
    readonly open: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly openText: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly closeText: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly borderColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly onOpen: {
        readonly type: PropType<HandleChange>;
        readonly default: HandleChange | null;
    };
    readonly onClose: {
        readonly type: PropType<HandleChange>;
        readonly default: HandleChange | null;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    readonly open: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly openText: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly closeText: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly borderColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly onOpen: {
        readonly type: PropType<HandleChange>;
        readonly default: HandleChange | null;
    };
    readonly onClose: {
        readonly type: PropType<HandleChange>;
        readonly default: HandleChange | null;
    };
}>>, {
    readonly onClose: HandleChange;
    readonly borderColor: string;
    readonly open: boolean;
    readonly openText: string;
    readonly closeText: string;
    readonly onOpen: HandleChange;
}, {}>>;
/** sticky-card 组件实例类型 */
export type StickyCardInstance = InstanceType<typeof StickyCard>;
export * from './src/interface';
export default FStickyCard;
