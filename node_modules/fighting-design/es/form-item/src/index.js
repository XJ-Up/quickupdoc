import { defineComponent as _, inject as d, computed as o, openBlock as r, createElementBlock as l, normalizeClass as u, normalizeStyle as p, toDisplayString as i, createCommentVNode as m, createElementVNode as h, renderSlot as b, createVNode as v, Transition as y, withCtx as C } from "vue";
import { Props as g } from "./index3.js";
import { FORM_PROVIDE_KEY as k } from "../../form/src/index3.js";
import { isString as E } from "../../_utils/is/index.js";
import { sizeChange as P } from "../../_utils/utils/index.js";
const S = {
  key: 0,
  class: "f-form-item__label"
}, V = { class: "f-form-item__content" }, z = {
  key: 0,
  class: "f-form-item__error"
};
var D = /* @__PURE__ */ _({
  name: "FFormItem",
  __name: "form-item",
  props: g,
  setup(a) {
    const n = a, e = d(k, null), s = o(() => {
      const t = e && e.childrenCheckResult[n.name];
      return E(t) ? t : !1;
    }), f = o(() => ({
      "--form-item-label-width": e && P(e.labelWidth)
    })), c = o(() => [
      "f-form-item",
      {
        [`f-form-item__label-${e == null ? void 0 : e.labelPosition}`]: e == null ? void 0 : e.labelPosition
      }
    ]);
    return (t, F) => (r(), l("div", {
      class: u(c.value),
      style: p(f.value)
    }, [
      t.label ? (r(), l("label", S, i(t.label), 1)) : m("", !0),
      h("div", V, [
        b(t.$slots, "default"),
        v(y, { name: "f-form-item__err-transition" }, {
          default: C(() => [
            s.value ? (r(), l("div", z, i(s.value), 1)) : m("", !0)
          ]),
          _: 1
        })
      ])
    ], 6));
  }
});
export {
  D as default
};
