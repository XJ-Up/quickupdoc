import type { FormItemRules, FormItemRulesItem } from './src/interface';
import type { DefineComponent, PropType, ComponentOptionsMixin, PublicProps, ExtractPropTypes } from 'vue';
import type { Install } from '../_utils';
import FormItem from "./src/form-item";
export declare const FFormItem: Install<DefineComponent<{
    readonly label: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly name: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly rules: {
        readonly type: PropType<FormItemRules | FormItemRulesItem>;
        readonly default: () => null;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    readonly label: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly name: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly rules: {
        readonly type: PropType<FormItemRules | FormItemRulesItem>;
        readonly default: () => null;
    };
}>>, {
    readonly name: string;
    readonly label: string;
    readonly rules: FormItemRules | FormItemRulesItem;
}, {}>>;
/** form-item 组件实例类型 */
export type FormItemInstance = InstanceType<typeof FormItem>;
export * from './src/interface';
export default FFormItem;
