import { defineComponent as g, mergeModels as E, useModel as L, ref as T, provide as V, reactive as B, toRef as i, openBlock as t, createElementBlock as a, createBlock as d, unref as s, withCtx as m, Fragment as h, renderList as y, renderSlot as C } from "vue";
import { Props as F, TREE_PROPS_KEY as M } from "./index3.js";
import { FCheckboxGroup as O } from "../../checkbox-group/index.js";
import v from "../components/tree-item/index.js";
import { isObject as P, isArray as R } from "../../_utils/is/index.js";
const $ = {
  role: "tree",
  class: "f-tree"
};
var G = /* @__PURE__ */ g({
  name: "FTree",
  __name: "tree",
  props: /* @__PURE__ */ E(F, {
    check: { type: Array, default: [] },
    checkModifiers: {}
  }),
  emits: ["update:check"],
  setup(f) {
    const l = f, b = L(f, "check"), p = (e, n = 0) => {
      P(e) && (e = [e]);
      const o = [];
      if (R(e))
        for (const r of e) {
          const k = { ...r, __level: n };
          r.children && (k.children = p(r.children, n + 1)), o.push(k);
        }
      return o;
    }, c = p(l.data), u = T([]), _ = (e) => {
      b.value = e;
    };
    return V(
      M,
      B({
        onClickLabel: i(l, "onClickLabel"),
        isCheck: i(l, "isCheck"),
        offset: i(l, "offset"),
        tree: c
      })
    ), (e, n) => (t(), a("div", $, [
      e.isCheck ? (t(), d(s(O), {
        key: 0,
        modelValue: u.value,
        "onUpdate:modelValue": n[0] || (n[0] = (o) => u.value = o),
        style: { display: "block" },
        "on-change": _
      }, {
        default: m(() => [
          (t(!0), a(h, null, y(s(c), (o, r) => (t(), d(s(v), {
            key: r,
            model: o
          }, {
            options: m(() => [
              C(e.$slots, "options")
            ]),
            _: 2
          }, 1032, ["model"]))), 128))
        ]),
        _: 3
      }, 8, ["modelValue"])) : (t(!0), a(h, { key: 1 }, y(s(c), (o, r) => (t(), d(s(v), {
        key: r,
        model: o
      }, {
        options: m(() => [
          C(e.$slots, "options")
        ]),
        _: 2
      }, 1032, ["model"]))), 128))
    ]));
  }
});
export {
  G as default
};
