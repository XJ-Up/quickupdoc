import { defineComponent as p, ref as u, computed as v, onMounted as d, openBlock as w, createElementBlock as b, normalizeStyle as N, toDisplayString as _ } from "vue";
import { Props as g } from "./index3.js";
import { isNumber as i } from "../../_utils/is/index.js";
import { warning as x } from "../../_utils/tips/index.js";
import { useRun as y } from "../../_hooks/use-run/index.js";
var B = /* @__PURE__ */ p({
  name: "FNumberAnimate",
  __name: "number-animate",
  props: g,
  setup(s, { expose: l }) {
    const e = s, { run: c } = y(), n = u(e.from), r = u(!1), a = (t) => {
      r.value && (n.value = e.from, r.value = !1);
      const o = Number(e.to);
      if (!i(Number(n.value)) || !i(o)) {
        x("f-number-animate", "Expected value is not a number");
        return;
      }
      if (n.value += o / e.approximateTime * 20, n.value >= o) {
        n.value = o, c(e.onAnimationEnd, t);
        return;
      }
      window && window.requestAnimationFrame(a);
    }, f = v(() => e.localeString ? n.value.toLocaleString() : n.value), m = (t = !0) => {
      r.value = t, window && window.requestAnimationFrame(a);
    };
    return d(() => {
      e.automatic && m(!1);
    }), l({ run: () => {
      m();
    } }), (t, o) => (w(), b("div", {
      class: "f-number-animate",
      style: N(t.styles)
    }, _(f.value), 5));
  }
});
export {
  B as default
};
