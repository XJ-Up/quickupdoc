import { defineComponent as d, inject as _, getCurrentInstance as v, computed as C, openBlock as i, createElementBlock as k, normalizeClass as y, normalizeStyle as I, unref as m, createBlock as g, createCommentVNode as h, createElementVNode as E, renderSlot as b } from "vue";
import { Props as A } from "./index3.js";
import { MENU_PROVIDE_KEY as N } from "../../menu/src/index3.js";
import { FSvgIcon as S } from "../../svg-icon/index.js";
import { useList as z } from "../../_hooks/use-list/index.js";
import { warning as B } from "../../_utils/tips/index.js";
import { useRun as M } from "../../_hooks/use-run/index.js";
const P = { class: "f-menu-item__text" };
var K = /* @__PURE__ */ d({
  name: "FMenuItem",
  __name: "menu-item",
  props: A,
  setup(s) {
    const e = s, { run: r } = M(), { styles: c } = z(e, "menu-item"), t = _(N, null), a = v(), l = (n) => {
      if (e.disabled)
        return;
      t && (r(t.onMenuItemClick, e.name, n), r(t.setActiveName, e.name));
      const o = a.appContext.config.globalProperties.$router;
      if (o && e.to)
        try {
          o.push(e.to);
        } catch (p) {
          B("f-menu-item", p);
        }
    }, u = C(() => !t || !t.defaultActive ? !1 : e.name === t.defaultActive.value), f = c(["fontSize", "color"]);
    return (n, o) => (i(), k("div", {
      role: "menuitem",
      class: y([
        "f-menu-item",
        { "f-menu-item__active": u.value, "f-menu-item__disabled": n.disabled }
      ]),
      style: I(m(f)),
      onClick: l
    }, [
      n.icon ? (i(), g(m(S), {
        key: 0,
        icon: n.icon
      }, null, 8, ["icon"])) : h("", !0),
      E("span", P, [
        b(n.$slots, "default")
      ])
    ], 6));
  }
});
export {
  K as default
};
