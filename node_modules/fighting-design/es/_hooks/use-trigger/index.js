import { reactive as h, computed as x, ref as C, onMounted as y, watch as R } from "vue";
import { TRIGGER_CONTENT_BOX_CLASS as T, TRIGGER_CLASS as k } from "../../_tokens/key/index2.js";
import { sizeChange as _ } from "../../_utils/utils/index.js";
import { useRun as b } from "../use-run/index.js";
const D = (n, i) => {
  const { run: c } = b(), a = h({ x: "", y: "" }), m = x(() => {
    const { spacing: e, enterDuration: t, leaveDuration: u } = n;
    return {
      "--trigger-content-x": a.x,
      "--trigger-content-y": a.y,
      "--trigger-spacing-size": _(e),
      "--trigger-enter-duration": t && t + "s",
      "--trigger-leave-duration": u && u + "s"
    };
  }), l = () => {
    const e = i.value;
    if (!e)
      return;
    const { left: t, top: u, height: L } = e.getBoundingClientRect(), E = t + window.scrollX, w = u + window.scrollY + L;
    a.x = E + "px", a.y = w + "px";
  }, r = C(!1);
  let s = !1;
  const v = (e) => {
    if (!n.disabled) {
      if (r.value) {
        s = !0;
        return;
      }
      l(), r.value = !0, s = !0, c(n.onOpen, r.value, e), c(n.onChange, r.value, e);
    }
  }, o = (e) => {
    if (n.disabled)
      return;
    s = !1;
    const t = () => {
      r.value = !1, c(n.onClose, r.value, e), c(n.onChange, r.value, e);
    };
    if (n.trigger === "click") {
      t();
      return;
    }
    setTimeout(() => {
      s || t();
    }, 300);
  }, g = () => {
    s = !0;
  }, d = () => {
    i.value && (n.trigger === "hover" && (i.value.addEventListener("mouseenter", v), i.value.addEventListener("mouseleave", o)), n.trigger === "click" && i.value.addEventListener("click", v));
  };
  y(d), R(() => n.trigger, d);
  const f = (e) => {
    const t = e.target;
    t.closest("." + T) || t.closest("." + k) || (o(e), window.removeEventListener("click", f, !0), window.removeEventListener("resize", l));
  };
  return {
    visible: r,
    styleList: m,
    close: o,
    onBeforeEnter: (e) => {
      if (n.trigger === "hover") {
        const t = e;
        t.addEventListener("mouseenter", g), t.addEventListener("mouseleave", o);
      }
      window.addEventListener("resize", l), window.addEventListener("click", f, !0);
    },
    onAfterLeave: (e) => {
      if (n.trigger === "hover") {
        const t = e;
        t.removeEventListener("mouseenter", g), t.removeEventListener("mouseleave", o);
      }
    }
  };
};
export {
  D as useTrigger
};
