import { reactive as h, useSlots as u, computed as v } from "vue";
import { getChildren as x } from "../../_utils/get-children/index.js";
import { splitString as y } from "../../_utils/utils/index.js";
import { warning as f } from "../../_utils/tips/index.js";
import { isString as m, isArray as b, isObject as k, isNumber as C } from "../../_utils/is/index.js";
const L = (i) => {
  const a = h({}), c = u(), p = v(() => {
    if (!c.default)
      return [];
    const t = x(c.default(), "FFormItem");
    return t.forEach((r) => {
      r.props && r.props.name && r.props.rules && (a[r.props.name] = !1);
    }), t;
  }), l = (t, r) => {
    const s = (e) => {
      if ((e.max || e.min) && !C(t) && !m(t))
        return f("f-form-item", "Wrong parameter type to be detected"), !1;
      const o = (t + "").length;
      return !// 必填项
      (e.required && !t || // 设置最大输入长度
      e.max && o > e.max || // 设置最小输入长度
      e.min && o < e.min || // 设置正则校验
      e.regExp && !e.regExp.test(t) || // 自定义校验方法
      e.validator && !e.validator());
    };
    if (b(r)) {
      for (const e of r)
        if (!s(e))
          return e.message || !1;
    } else if (k(r) && !s(r))
      return r.message || !1;
    return !0;
  };
  return { childrenCheckResult: a, validate: () => {
    p.value.forEach((r) => {
      const s = r.props && r.props.rules, e = r.props && r.props.name;
      if (r.props && s && e && i.model)
        if (e.includes(".")) {
          const o = y(e, ".");
          let n = i.model;
          if (o && o.length) {
            for (const g of o)
              if (n = n[g], !n) {
                f("f-form-item", `${e} is not a valid \`name\` parameter`);
                break;
              }
            const d = l(
              n,
              s
            );
            a[e] = d;
          }
        } else if (e in i.model) {
          const o = i.model[e], n = l(o, s);
          a[e] = n;
        } else
          f("f-form-item", `${e} is not a valid \`name\` parameter`);
    });
    const t = Object.values(a);
    return t.length ? t.every((r) => !!r && !m(r)) : !0;
  } };
};
export {
  L as useFormCheck
};
