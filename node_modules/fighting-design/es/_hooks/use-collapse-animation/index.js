import { computed as h } from "vue";
import { isNumber as l } from "../../_utils/is/index.js";
import { useRun as a } from "../use-run/index.js";
const A = (n) => {
  const { run: i } = a(), s = h(() => l(n.animationTime) ? `${n.animationTime}s all ease-in-out` : "0.747s all ease-in-out");
  return { onBeforeEnter: (e) => {
    const t = e;
    t.style.transition = s.value, n.widthAnimation && (t.style.width = "0"), n.heightAnimation && (t.style.height = "0"), i(n.onOpen, e);
  }, onEnter: (e) => {
    const t = e;
    if (t.style.overflow = "hidden", n.heightAnimation ? t.style.height = t.scrollHeight + "px" : t.style.height = "auto", n.widthAnimation) {
      t.style.width = "auto";
      const o = t.getBoundingClientRect().width;
      t.style.width = "0", t.offsetWidth, t.style.width = o + "px";
    } else
      t.style.width = "auto";
  }, onAfterEnter: (e) => {
    const t = e;
    t.style.transition = "", t.style.height = "", t.style.width = "", i(n.onOpenEnd, e);
  }, onBeforeLeave: (e) => {
    const t = e;
    if (t.style.transition = s.value, n.heightAnimation && (t.style.height = t.scrollHeight + "px"), n.widthAnimation) {
      const o = t.getBoundingClientRect().width;
      t.style.width = o + "px";
    }
    i(n.onClose, e);
  }, onLeave: (e) => {
    const t = e;
    t.style.overflow = "hidden", n.heightAnimation && (t.style.height = "0"), n.widthAnimation && (t.style.width = "0");
  }, onAfterLeave: (e) => {
    const t = e;
    t.style.transition = "", t.style.height = "", t.style.width = "", i(n.onCloseEnd, e);
  } };
};
export {
  A as useCollapseAnimation
};
