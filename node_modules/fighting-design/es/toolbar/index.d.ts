import type { ToolbarClick } from './src/interface';
import type { FightingSize } from '..';
import type { DefineComponent, PropType, ComponentOptionsMixin, PublicProps, ExtractPropTypes } from 'vue';
import type { Install } from '../_utils';
import Toolbar from "./src/toolbar";
export declare const FToolbar: Install<DefineComponent<{
    readonly round: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly size: {
        readonly type: PropType<FightingSize>;
        readonly default: FightingSize;
        readonly validator?: ((value: FightingSize) => boolean) | undefined;
    };
    readonly background: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly textColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly fixed: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly width: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly height: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly onClick: {
        readonly type: PropType<ToolbarClick>;
        readonly default: ToolbarClick | null;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    readonly round: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly size: {
        readonly type: PropType<FightingSize>;
        readonly default: FightingSize;
        readonly validator?: ((value: FightingSize) => boolean) | undefined;
    };
    readonly background: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly textColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly fixed: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly width: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly height: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly onClick: {
        readonly type: PropType<ToolbarClick>;
        readonly default: ToolbarClick | null;
    };
}>>, {
    readonly size: FightingSize;
    readonly round: boolean;
    readonly background: string;
    readonly fixed: boolean;
    readonly width: string | number;
    readonly onClick: ToolbarClick;
    readonly height: string | number;
    readonly textColor: string;
}, {}>>;
/** toolbar 组件实例类型 */
export type ToolbarInstance = InstanceType<typeof Toolbar>;
export * from './src/interface';
export default FToolbar;
