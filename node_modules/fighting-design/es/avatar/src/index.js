import { defineComponent as g, useSlots as h, ref as R, inject as b, reactive as c, toRefs as f, unref as o, openBlock as t, createElementBlock as r, normalizeClass as C, normalizeStyle as n, createBlock as I, withCtx as A, renderSlot as m, toDisplayString as p, createElementVNode as P } from "vue";
import { Props as B } from "./index3.js";
import { FSvgIcon as E } from "../../svg-icon/index.js";
import { AVATAR_GROUP_PROPS_KEY as L } from "../../avatar-group/src/index3.js";
import { useLoadImg as N } from "../../_hooks/use-load-img/index.js";
import { isString as $, isNumber as j } from "../../_utils/is/index.js";
import { useList as w } from "../../_hooks/use-list/index.js";
const F = {
  key: 1,
  class: "f-avatar__text"
}, O = ["alt"], V = { class: "f-avatar__error-text" };
var J = /* @__PURE__ */ g({
  name: "FAvatar",
  __name: "avatar",
  props: B,
  setup(d) {
    const s = d, v = h(), a = R(), y = b(
      L,
      void 0
    ), { isSuccess: u, isShowNode: _ } = N(
      a,
      s,
      () => !v.icon && !s.icon && !s.text && a.value
    ), i = c({
      ...f(s),
      ...f(c(y || {}))
    }), { styles: k, classes: z } = w(i, "avatar"), S = z(
      [
        "round",
        "fit",
        {
          key: "size",
          callback: () => $(i.size)
        }
      ],
      "f-avatar"
    ), l = k(
      [
        "background",
        "fontColor",
        "fontSize",
        "zIndex",
        /**
         * size 配置项需要进行检查是否需要过滤
         *
         * 只有是数字的时候才需要过滤，是数字代表是自定义的尺寸
         *
         * 字符串代表内部尺寸，用于类名拼接
         */
        {
          key: "size",
          callback: () => j(i.size)
        }
      ],
      "zIndex"
    );
    return (e, D) => o(u) ? (t(), r("div", {
      key: 0,
      role: "img",
      class: C(o(S)),
      style: n(o(l))
    }, [
      e.$slots.icon || e.icon ? (t(), I(o(E), {
        key: 0,
        size: e.fontSize || 15,
        color: e.fontColor,
        icon: e.icon
      }, {
        default: A(() => [
          m(e.$slots, "icon")
        ]),
        _: 3
      }, 8, ["size", "color", "icon"])) : e.text ? (t(), r("span", F, p(e.text), 1)) : (t(), r("img", {
        key: 2,
        ref_key: "avatarRef",
        ref: a,
        class: "f-avatar__img",
        src: "",
        style: n(o(_) ? "" : "visibility: hidden"),
        alt: e.alt
      }, null, 12, O))
    ], 6)) : (t(), r("div", {
      key: 1,
      class: "f-avatar__error",
      style: n(o(l))
    }, [
      m(e.$slots, "error", {}, () => [
        P("span", V, p(e.alt || "加载失败"), 1)
      ])
    ], 4));
  }
});
export {
  J as default
};
