import type { FightingIcon, FightingFit, FightingSize, HandleEvent } from '../..';
import type { DefineComponent, PropType, ComponentOptionsMixin, PublicProps, ExtractPropTypes } from 'vue';
declare const _sfc_main: DefineComponent<{
    readonly src: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly errSrc: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly icon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly alt: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly round: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly lazy: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    }; /** 获取到父组件注入的依赖项 */
    readonly fit: {
        readonly type: PropType<FightingFit>;
        readonly default: FightingFit;
        readonly validator?: ((value: FightingFit) => boolean) | undefined;
    };
    readonly size: {
        readonly type: PropType<number | FightingSize>;
        readonly default: () => FightingSize;
        readonly validator: (val: number | FightingSize) => boolean;
    };
    readonly background: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly fontSize: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly fontColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly text: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly rootMargin: {
        readonly type: PropType<string | number>;
        readonly default: "100px" | undefined;
    };
    readonly onLoad: {
        readonly type: PropType<HandleEvent>;
        readonly default: HandleEvent | null;
    };
    readonly onError: {
        readonly type: PropType<HandleEvent>;
        readonly default: HandleEvent | null;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    readonly src: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly errSrc: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly icon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly alt: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly round: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly lazy: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    }; /** 获取到父组件注入的依赖项 */
    readonly fit: {
        readonly type: PropType<FightingFit>;
        readonly default: FightingFit;
        readonly validator?: ((value: FightingFit) => boolean) | undefined;
    };
    readonly size: {
        readonly type: PropType<number | FightingSize>;
        readonly default: () => FightingSize;
        readonly validator: (val: number | FightingSize) => boolean;
    };
    readonly background: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly fontSize: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly fontColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly text: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly rootMargin: {
        readonly type: PropType<string | number>;
        readonly default: "100px" | undefined;
    };
    readonly onLoad: {
        readonly type: PropType<HandleEvent>;
        readonly default: HandleEvent | null;
    };
    readonly onError: {
        readonly type: PropType<HandleEvent>;
        readonly default: HandleEvent | null;
    };
}>>, {
    readonly size: number | FightingSize;
    readonly fontSize: string | number;
    readonly round: boolean;
    readonly background: string;
    readonly src: string;
    readonly errSrc: string;
    readonly icon: FightingIcon;
    readonly alt: string;
    readonly lazy: boolean;
    readonly fit: FightingFit;
    readonly fontColor: string;
    readonly text: string;
    readonly rootMargin: string | number;
    readonly onLoad: HandleEvent;
    readonly onError: HandleEvent;
}, {}>;
export default _sfc_main;
