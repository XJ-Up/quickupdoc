import { defineComponent as _, mergeModels as g, useModel as y, computed as l, inject as R, reactive as C, openBlock as c, createElementBlock as m, normalizeClass as D, unref as p, withDirectives as P, createElementVNode as f, vModelRadio as B, createCommentVNode as E, renderSlot as M, createTextVNode as N, toDisplayString as S } from "vue";
import { Props as O } from "./index3.js";
import { RADIO_GROUP_PROPS_kEY as j } from "../../radio-group/src/index3.js";
import { useList as w } from "../../_hooks/use-list/index.js";
import { useRun as I } from "../../_hooks/use-run/index.js";
const L = ["value", "disabled", "name"], U = {
  key: 0,
  class: "f-radio__circle"
}, z = { class: "f-radio__text" };
var $ = /* @__PURE__ */ _({
  name: "FRadio",
  __name: "radio",
  props: /* @__PURE__ */ g(O, {
    modelValue: { type: Boolean, default: null, type: [String, Number, Boolean] },
    modelModifiers: {}
  }),
  emits: ["update:modelValue"],
  setup(s) {
    const o = s, b = y(s, "modelValue"), { run: d } = I(), t = l({
      get: () => a && a.modelValue || o.modelValue,
      set: (e) => {
        if (a && !n.value) {
          d(a.changeEvent, e);
          return;
        }
        r.value || (b.value = e, d(o.onChange, e));
      }
    }), a = R(j, null), v = l(() => t.value === o.label), n = l(
      () => !!(a && a.disabled)
    ), r = l(() => o.disabled || n.value), { classes: h } = w(
      C({
        checked: v,
        disabled: r
      }),
      "radio"
    ), k = h(["checked", "disabled"], "f-radio");
    return (e, i) => {
      var u;
      return c(), m("label", {
        role: "radio",
        "aria-checked": "false",
        tabindex: "0",
        class: D(p(k))
      }, [
        P(f("input", {
          "onUpdate:modelValue": i[0] || (i[0] = (V) => t.value = V),
          hidden: "",
          type: "radio",
          value: e.label,
          disabled: e.disabled,
          name: e.name
        }, null, 8, L), [
          [B, t.value]
        ]),
        (u = p(a)) != null && u.background ? E("", !0) : (c(), m("span", U)),
        f("span", z, [
          M(e.$slots, "default", {}, () => [
            N(S(e.label), 1)
          ])
        ])
      ], 2);
    };
  }
});
export {
  $ as default
};
