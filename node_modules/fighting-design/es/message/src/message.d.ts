import type { MessagePlacement, MessageClose } from './interface';
import type { FightingType, FightingIcon } from '../..';
import type { DefineComponent, PropType, VNode, RendererNode, RendererElement, ComponentOptionsMixin, PublicProps, ExtractPropTypes } from 'vue';
declare const _sfc_main: DefineComponent<{
    readonly message: {
        readonly type: PropType<string | VNode<RendererNode, RendererElement, {
            [key: string]: any;
        }>>;
        readonly default: () => null;
    };
    readonly type: {
        readonly type: PropType<FightingType>;
        readonly default: FightingType;
        readonly validator?: ((value: FightingType) => boolean) | undefined;
    };
    readonly close: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly duration: {
        readonly type: NumberConstructor;
        readonly default: number | undefined;
    };
    readonly round: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly icon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly color: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly background: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly offset: {
        readonly type: NumberConstructor;
        readonly default: number | undefined;
    };
    readonly placement: {
        readonly type: PropType<MessagePlacement>;
        readonly default: MessagePlacement;
        readonly validator?: ((value: MessagePlacement) => boolean) | undefined;
    };
    readonly zIndex: {
        readonly type: NumberConstructor;
        readonly default: number | undefined;
    };
    readonly closeBtn: {
        readonly type: PropType<string | VNode<RendererNode, RendererElement, {
            [key: string]: any;
        }>>;
        readonly default: () => null;
    };
    readonly onClose: {
        readonly type: PropType<MessageClose>;
        readonly default: MessageClose | null;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    readonly message: {
        readonly type: PropType<string | VNode<RendererNode, RendererElement, {
            [key: string]: any;
        }>>;
        readonly default: () => null;
    };
    readonly type: {
        readonly type: PropType<FightingType>;
        readonly default: FightingType;
        readonly validator?: ((value: FightingType) => boolean) | undefined;
    };
    readonly close: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly duration: {
        readonly type: NumberConstructor;
        readonly default: number | undefined;
    };
    readonly round: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly icon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly color: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly background: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly offset: {
        readonly type: NumberConstructor;
        readonly default: number | undefined;
    };
    readonly placement: {
        readonly type: PropType<MessagePlacement>;
        readonly default: MessagePlacement;
        readonly validator?: ((value: MessagePlacement) => boolean) | undefined;
    };
    readonly zIndex: {
        readonly type: NumberConstructor;
        readonly default: number | undefined;
    };
    readonly closeBtn: {
        readonly type: PropType<string | VNode<RendererNode, RendererElement, {
            [key: string]: any;
        }>>;
        readonly default: () => null;
    };
    readonly onClose: {
        readonly type: PropType<MessageClose>;
        readonly default: MessageClose | null;
    };
}>>, {
    readonly type: FightingType;
    readonly close: boolean;
    readonly round: boolean;
    readonly background: string;
    readonly color: string;
    readonly duration: number;
    readonly onClose: MessageClose;
    readonly icon: FightingIcon;
    readonly zIndex: number;
    readonly message: string | VNode<RendererNode, RendererElement, {
        [key: string]: any;
    }>;
    readonly offset: number;
    readonly placement: MessagePlacement;
    readonly closeBtn: string | VNode<RendererNode, RendererElement, {
        [key: string]: any;
    }>;
}, {}>;
export default _sfc_main;
