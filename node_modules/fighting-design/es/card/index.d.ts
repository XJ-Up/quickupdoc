import type { CardShadow, CardClose } from './src/interface';
import type { DefineComponent, PropType, ComponentOptionsMixin, PublicProps, ExtractPropTypes } from 'vue';
import type { Install } from '../_utils';
import Card from "./src/card";
export declare const FCard: Install<DefineComponent<{
    readonly title: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly round: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly padding: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly shadow: {
        readonly type: PropType<CardShadow>;
        readonly default: CardShadow;
        readonly validator?: ((value: CardShadow) => boolean) | undefined;
    };
    readonly borderColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly background: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly titleColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly titleBold: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly close: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly onClose: {
        readonly type: PropType<CardClose>;
        readonly default: CardClose | null;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    readonly title: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly round: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly padding: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly shadow: {
        readonly type: PropType<CardShadow>;
        readonly default: CardShadow;
        readonly validator?: ((value: CardShadow) => boolean) | undefined;
    };
    readonly borderColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly background: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly titleColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly titleBold: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly close: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly onClose: {
        readonly type: PropType<CardClose>;
        readonly default: CardClose | null;
    };
}>>, {
    readonly close: boolean;
    readonly title: string;
    readonly round: boolean;
    readonly background: string;
    readonly titleColor: string;
    readonly onClose: CardClose;
    readonly padding: string | number;
    readonly shadow: CardShadow;
    readonly borderColor: string;
    readonly titleBold: boolean;
}, {}>>;
/** card 组件实例类型 */
export type CardInstance = InstanceType<typeof Card>;
export * from './src/interface';
export default FCard;
