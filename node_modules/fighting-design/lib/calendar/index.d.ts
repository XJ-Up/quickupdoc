import type { CalendarChange } from './src/interface';
import type { DefineComponent, PropType, ComponentOptionsMixin, PublicProps, ExtractPropTypes } from 'vue';
import type { Install } from '../_utils';
import Calendar from "./src/calendar";
export declare const FCalendar: Install<DefineComponent<{
    readonly date: {
        readonly type: DateConstructor;
        readonly default: () => Date;
        readonly required: true;
    };
    readonly lunar: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly showHeader: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly border: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly borderColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly dayCellHeight: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly weekCellHeight: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly onChange: {
        readonly type: PropType<CalendarChange>;
        readonly default: CalendarChange | null;
    };
    readonly onChangeDate: {
        readonly type: PropType<CalendarChange>;
        readonly default: CalendarChange | null;
    };
    readonly onChangeMonth: {
        readonly type: PropType<CalendarChange>;
        readonly default: CalendarChange | null;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    readonly date: {
        readonly type: DateConstructor;
        readonly default: () => Date;
        readonly required: true;
    };
    readonly lunar: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly showHeader: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly border: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly borderColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly dayCellHeight: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly weekCellHeight: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly onChange: {
        readonly type: PropType<CalendarChange>;
        readonly default: CalendarChange | null;
    };
    readonly onChangeDate: {
        readonly type: PropType<CalendarChange>;
        readonly default: CalendarChange | null;
    };
    readonly onChangeMonth: {
        readonly type: PropType<CalendarChange>;
        readonly default: CalendarChange | null;
    };
}>>, {
    readonly date: Date;
    readonly lunar: boolean;
    readonly showHeader: boolean;
    readonly border: boolean;
    readonly borderColor: string;
    readonly dayCellHeight: string | number;
    readonly weekCellHeight: string | number;
    readonly onChange: CalendarChange;
    readonly onChangeDate: CalendarChange;
    readonly onChangeMonth: CalendarChange;
}, {}>>;
/** calendar 组件实例类型 */
export type CalendarInstance = InstanceType<typeof Calendar>;
export * from './src/interface';
export default FCalendar;
