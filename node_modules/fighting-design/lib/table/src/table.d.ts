import type { DefineComponent, PropType, ComponentOptionsMixin, PublicProps, ExtractPropTypes } from 'vue';
import type { TableAlign, TableColumns,  TableData } from './interface';
declare const _sfc_main: DefineComponent<{
    readonly data: {
        readonly type: PropType<TableData>;
        readonly default: () => TableData | null;
    };
    readonly columns: {
        readonly type: PropType<TableColumns[]>;
        readonly default: () => TableColumns[] | null;
    };
    readonly align: {
        readonly type: PropType<TableAlign>;
        readonly default: TableAlign;
        readonly validator?: ((value: TableAlign) => boolean) | undefined;
    };
    readonly border: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly select: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly num: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly zebra: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly zebraColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly height: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly width: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly bgColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly headBgColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly showHead: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly onSelect: {
        readonly type: PropType<Function>;
        readonly default: Function | null;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    readonly data: {
        readonly type: PropType<TableData>;
        readonly default: () => TableData | null;
    };
    readonly columns: {
        readonly type: PropType<TableColumns[]>;
        readonly default: () => TableColumns[] | null;
    };
    readonly align: {
        readonly type: PropType<TableAlign>;
        readonly default: TableAlign;
        readonly validator?: ((value: TableAlign) => boolean) | undefined;
    };
    readonly border: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly select: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly num: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly zebra: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly zebraColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly height: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly width: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly bgColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly headBgColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly showHead: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly onSelect: {
        readonly type: PropType<Function>;
        readonly default: Function | null;
    };
}>>, {
    readonly width: string | number;
    readonly border: boolean;
    readonly height: string | number;
    readonly select: boolean;
    readonly zebra: boolean;
    readonly zebraColor: string;
    readonly data: TableData;
    readonly columns: TableColumns[];
    readonly align: TableAlign;
    readonly num: boolean;
    readonly bgColor: string;
    readonly headBgColor: string;
    readonly showHead: boolean;
    readonly onSelect: Function;
}, {}>;
export default _sfc_main;
