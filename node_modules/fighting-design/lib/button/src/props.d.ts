import type { PropType, ExtractPropTypes } from 'vue';
import type { ButtonNative } from './interface';
import type { FightingSize, FightingType, FightingIcon, HandleMouse, FightingTarget } from '../../_interface';
export declare const Props: {
    /** 是否加粗 */
    readonly bold: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /** 是否为圆形 */
    readonly circle: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /** 是否为圆角 */
    readonly round: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /** 是否带有扩散效果 */
    readonly spread: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /** 文字大小 */
    readonly fontSize: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    /** 字体颜色 */
    readonly fontColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    /**
     * 按钮尺寸
     *
     * @values large middle small mini
     */
    readonly size: {
        readonly type: PropType<FightingSize>;
        readonly default: FightingSize;
        readonly validator?: ((value: FightingSize) => boolean) | undefined;
    };
    /** 是否为块级元素 */
    readonly block: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /** 跳转的连接地址 */
    readonly href: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    /**
     * 针对 href 处理的跳转方式
     *
     * 原生属性
     *
     * @values _blank _self _parent _top
     * @default _self
     * @see target https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a#attr-target
     */
    readonly target: {
        readonly type: PropType<FightingTarget>;
        readonly default: FightingTarget;
        readonly validator?: ((value: FightingTarget) => boolean) | undefined;
    };
    /** 是否为 loading 状态 */
    readonly loading: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /** 是否禁用 */
    readonly disabled: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /** 自定义 loading icon */
    readonly loadingIcon: {
        readonly type: PropType<FightingIcon>; /** 是否为简约的按钮（非自定义按钮颜色时有效） */
        readonly default: () => FightingIcon | null;
    };
    /**
     * 按钮的类型（非自定义按钮颜色时有效）
     *
     * @values default primary success danger warning info
     */
    readonly type: {
        readonly type: PropType<FightingType>;
        readonly default: FightingType;
        readonly validator?: ((value: FightingType) => boolean) | undefined;
    };
    /** 是否自动获取焦点 */
    readonly autofocus: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /**
     * 原生 name 属性
     *
     * @see name https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button#attr-name
     */
    readonly name: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    /** 自定义阴影样式 */
    readonly shadow: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    /** 是否为文字按钮（非自定义按钮颜色时有效） */
    readonly text: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /**
     * 原生 type 属性
     *
     * @values button submit reset
     * @default button
     * @see type https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button#attr-type
     */
    readonly nativeType: {
        readonly type: PropType<ButtonNative>;
        readonly default: ButtonNative;
        readonly validator?: ((value: ButtonNative) => boolean) | undefined;
    };
    /** 是否为简约的按钮（非自定义按钮颜色时有效） */
    readonly simple: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /** 自定义之前的 icon */
    readonly beforeIcon: {
        readonly type: PropType<FightingIcon>; /** 是否为简约的按钮（非自定义按钮颜色时有效） */
        readonly default: () => FightingIcon | null;
    };
    /** 自定义之后的 icon */
    readonly afterIcon: {
        readonly type: PropType<FightingIcon>; /** 是否为简约的按钮（非自定义按钮颜色时有效） */
        readonly default: () => FightingIcon | null;
    };
    /** 是否为涟漪效果 */
    readonly ripples: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    /** 自定义涟漪效果颜色 */
    readonly ripplesColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    /** 自定义按钮颜色 */
    readonly color: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    /** 点击之后的回调函数 */
    readonly onClick: {
        readonly type: PropType<HandleMouse>;
        readonly default: HandleMouse | null;
    };
};
/** button 组件 props 类型 */
export type ButtonProps = ExtractPropTypes<typeof Props>;
