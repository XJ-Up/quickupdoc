import type { ButtonNative } from './interface';
import type { DefineComponent, PropType, ComponentOptionsMixin, PublicProps, ExtractPropTypes } from 'vue';
import type { FightingSize, FightingTarget, FightingType, HandleMouse, FightingIcon } from '../../_interface';
declare const _sfc_main: DefineComponent<{
    readonly bold: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly circle: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly round: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly spread: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly fontSize: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly fontColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly size: {
        readonly type: PropType<FightingSize>;
        readonly default: FightingSize;
        readonly validator?: ((value: FightingSize) => boolean) | undefined;
    };
    readonly block: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly href: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly target: {
        readonly type: PropType<FightingTarget>;
        readonly default: FightingTarget;
        readonly validator?: ((value: FightingTarget) => boolean) | undefined;
    };
    readonly loading: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly disabled: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly loadingIcon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly type: {
        readonly type: PropType<FightingType>;
        readonly default: FightingType;
        readonly validator?: ((value: FightingType) => boolean) | undefined;
    };
    readonly autofocus: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly name: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly shadow: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly text: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly nativeType: {
        readonly type: PropType<ButtonNative>;
        readonly default: ButtonNative;
        readonly validator?: ((value: ButtonNative) => boolean) | undefined;
    };
    readonly simple: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly beforeIcon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly afterIcon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly ripples: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly ripplesColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly color: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly onClick: {
        readonly type: PropType<HandleMouse>;
        readonly default: HandleMouse | null;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    readonly bold: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly circle: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly round: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly spread: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly fontSize: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly fontColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly size: {
        readonly type: PropType<FightingSize>;
        readonly default: FightingSize;
        readonly validator?: ((value: FightingSize) => boolean) | undefined;
    };
    readonly block: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly href: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly target: {
        readonly type: PropType<FightingTarget>;
        readonly default: FightingTarget;
        readonly validator?: ((value: FightingTarget) => boolean) | undefined;
    };
    readonly loading: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly disabled: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly loadingIcon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly type: {
        readonly type: PropType<FightingType>;
        readonly default: FightingType;
        readonly validator?: ((value: FightingType) => boolean) | undefined;
    };
    readonly autofocus: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly name: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly shadow: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly text: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly nativeType: {
        readonly type: PropType<ButtonNative>;
        readonly default: ButtonNative;
        readonly validator?: ((value: ButtonNative) => boolean) | undefined;
    };
    readonly simple: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly beforeIcon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly afterIcon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly ripples: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly ripplesColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly color: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly onClick: {
        readonly type: PropType<HandleMouse>;
        readonly default: HandleMouse | null;
    };
}>>, {
    readonly size: FightingSize;
    readonly name: string;
    readonly type: FightingType;
    readonly fontSize: string | number;
    readonly bold: boolean;
    readonly simple: boolean;
    readonly round: boolean;
    readonly color: string;
    readonly beforeIcon: FightingIcon;
    readonly fontColor: string;
    readonly text: boolean;
    readonly circle: boolean;
    readonly spread: boolean;
    readonly block: boolean;
    readonly href: string;
    readonly target: FightingTarget;
    readonly loading: boolean;
    readonly disabled: boolean;
    readonly loadingIcon: FightingIcon;
    readonly autofocus: boolean;
    readonly shadow: string;
    readonly nativeType: ButtonNative;
    readonly afterIcon: FightingIcon;
    readonly ripples: boolean;
    readonly ripplesColor: string;
    readonly onClick: HandleMouse;
}, {}>;
export default _sfc_main;
