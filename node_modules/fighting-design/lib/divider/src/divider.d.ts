import type { DividerPosition, DividerType } from './interface';
import type { DefineComponent, PropType, ComponentOptionsMixin, PublicProps, ExtractPropTypes } from 'vue';
declare const _sfc_main: DefineComponent<{
    readonly position: {
        readonly type: PropType<DividerPosition>;
        readonly default: DividerPosition;
        readonly validator?: ((value: DividerPosition) => boolean) | undefined;
    };
    readonly vertical: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly color: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly fontColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly margin: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly height: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly background: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly type: {
        readonly type: PropType<DividerType>;
        readonly default: DividerType;
        readonly validator?: ((value: DividerType) => boolean) | undefined;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    readonly position: {
        readonly type: PropType<DividerPosition>;
        readonly default: DividerPosition;
        readonly validator?: ((value: DividerPosition) => boolean) | undefined;
    };
    readonly vertical: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly color: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly fontColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly margin: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly height: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly background: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly type: {
        readonly type: PropType<DividerType>;
        readonly default: DividerType;
        readonly validator?: ((value: DividerType) => boolean) | undefined;
    };
}>>, {
    readonly type: DividerType;
    readonly background: string;
    readonly color: string;
    readonly fontColor: string;
    readonly vertical: boolean;
    readonly position: DividerPosition;
    readonly margin: string | number;
    readonly height: string | number;
}, {}>;
export default _sfc_main;
