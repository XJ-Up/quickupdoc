import type { TooltipPosition, TooltipState } from './src/interface';
import type { DefineComponent, PropType, ComponentOptionsMixin, PublicProps, ExtractPropTypes } from 'vue';
import type { Install } from '../_utils';
import Tooltip from "./src/tooltip";
export declare const FTooltip: Install<DefineComponent<{
    readonly content: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly position: {
        readonly type: PropType<TooltipPosition>;
        readonly default: TooltipPosition;
        readonly validator?: ((value: TooltipPosition) => boolean) | undefined;
    };
    readonly disabled: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly state: {
        readonly type: PropType<TooltipState>;
        readonly default: TooltipState;
        readonly validator?: ((value: TooltipState) => boolean) | undefined;
    };
    readonly noArrow: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly bold: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly bright: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly background: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly fontColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    readonly content: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    readonly position: {
        readonly type: PropType<TooltipPosition>;
        readonly default: TooltipPosition;
        readonly validator?: ((value: TooltipPosition) => boolean) | undefined;
    };
    readonly disabled: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly state: {
        readonly type: PropType<TooltipState>;
        readonly default: TooltipState;
        readonly validator?: ((value: TooltipState) => boolean) | undefined;
    };
    readonly noArrow: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly bold: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly bright: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly background: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly fontColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
}>>, {
    readonly bold: boolean;
    readonly background: string;
    readonly fontColor: string;
    readonly disabled: boolean;
    readonly position: TooltipPosition;
    readonly content: string | number;
    readonly state: TooltipState;
    readonly noArrow: boolean;
    readonly bright: boolean;
}, {}>>;
/** tooltip 组件实例类型 */
export type TooltipInstance = InstanceType<typeof Tooltip>;
export * from './src/interface';
export default FTooltip;
