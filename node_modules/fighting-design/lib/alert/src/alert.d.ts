import type { FightingType, FightingIcon, HandleMouse } from '../..';
import type { DefineComponent, PropType, ComponentOptionsMixin, PublicProps, ExtractPropTypes } from 'vue';
declare const _sfc_main: DefineComponent<{
    readonly type: {
        readonly type: PropType<FightingType>;
        readonly default: FightingType;
        readonly validator?: ((value: FightingType) => boolean) | undefined;
    };
    readonly fontSize: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    /** 展示状态 */
    readonly titleSize: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    }; /** alertList 节点列表容器 dom */
    readonly bold: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly center: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly close: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly simple: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly title: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly round: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly background: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    }; /**
     * 点击关闭按钮
     *
     * @param { Object } evt 事件对象
     */
    readonly color: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly titleColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly fixed: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly closeIcon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly beforeIcon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly alertList: {
        readonly type: PropType<string[]>;
        readonly default: () => string[] | null;
    };
    readonly duration: {
        readonly type: NumberConstructor;
        readonly default: number | undefined;
    };
    readonly onClose: {
        readonly type: PropType<HandleMouse>;
        readonly default: HandleMouse | null;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    readonly type: {
        readonly type: PropType<FightingType>;
        readonly default: FightingType;
        readonly validator?: ((value: FightingType) => boolean) | undefined;
    };
    readonly fontSize: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    };
    /** 展示状态 */
    readonly titleSize: {
        readonly type: PropType<string | number>;
        readonly default: string | number | undefined;
    }; /** alertList 节点列表容器 dom */
    readonly bold: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly center: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly close: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly simple: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly title: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly round: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly background: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    }; /**
     * 点击关闭按钮
     *
     * @param { Object } evt 事件对象
     */
    readonly color: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly titleColor: {
        readonly type: PropType<string>;
        readonly default: string;
        readonly validator?: ((value: string) => boolean) | undefined;
    };
    readonly fixed: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    readonly closeIcon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly beforeIcon: {
        readonly type: PropType<FightingIcon>;
        readonly default: () => FightingIcon | null;
    };
    readonly alertList: {
        readonly type: PropType<string[]>;
        readonly default: () => string[] | null;
    };
    readonly duration: {
        readonly type: NumberConstructor;
        readonly default: number | undefined;
    };
    readonly onClose: {
        readonly type: PropType<HandleMouse>;
        readonly default: HandleMouse | null;
    };
}>>, {
    readonly type: FightingType;
    readonly fontSize: string | number;
    readonly titleSize: string | number;
    readonly bold: boolean;
    readonly center: boolean;
    readonly close: boolean;
    readonly simple: boolean;
    readonly title: string;
    readonly round: boolean;
    readonly background: string;
    readonly color: string;
    readonly titleColor: string;
    readonly fixed: boolean;
    readonly closeIcon: FightingIcon;
    readonly beforeIcon: FightingIcon;
    readonly alertList: string[];
    readonly duration: number;
    readonly onClose: HandleMouse;
}, {}>;
export default _sfc_main;
